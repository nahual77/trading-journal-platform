/**
 * MetaTrader account information (see https://metaapi.cloud/docs/client/models/metatraderAccountInformation/)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * MetaTrader account information (see https://metaapi.cloud/docs/client/models/metatraderAccountInformation/)\n */\nexport declare type MetatraderAccountInformation = {\n\n  /**\n   * Platform id (mt4 or mt5)\n   */\n  platform: string,\n\n  /**\n   * Broker name\n   */\n  broker: string,\n\n  /**\n   * Account base currency ISO code\n   */\n  currency: string,\n\n  /**\n   * Broker server name\n   */\n  server: string,\n\n  /**\n   * Account balance\n   */\n  balance: number,\n\n  /**\n   * Account liquidation value\n   */\n  equity: number,\n\n  /**\n   * Used margin\n   */\n  margin: number,\n\n  /**\n   * Free margin\n   */\n  freeMargin: number,\n\n  /**\n   * Account leverage coefficient\n   */\n  leverage: number,\n\n  /**\n   * Margin level calculated as % of equity/margin\n   */\n  marginLevel: number,\n\n  /**\n   * Flag indicating that trading is allowed\n   */\n  tradeAllowed: boolean,\n\n  /**\n   * Flag indicating that investor password was used (supported for g2 only)\n   */\n  investorMode?: boolean,\n\n  /**\n   * Margin calculation mode, one of ACCOUNT_MARGIN_MODE_EXCHANGE,\n   * ACCOUNT_MARGIN_MODE_RETAIL_NETTING, ACCOUNT_MARGIN_MODE_RETAIL_HEDGING\n   */\n  marginMode: string,\n\n  /**\n   * Account owner name\n   */\n  name: string,\n\n  /**\n   * Account login\n   */\n  login: number,\n\n  /**\n   * Account credit in the deposit currency\n   */\n  credit: number,\n\n  /**\n   * Current exchange rate of account currency into account base currency (USD if you did not override it)\n   */\n  accountCurrencyExchangeRate?: number,\n\n  /**\n   * Account type, one of ACCOUNT_TRADE_MODE_DEMO,\n   * ACCOUNT_TRADE_MODE_CONTEST, ACCOUNT_TRADE_MODE_REAL\n   */\n  type: string,\n  \n  /**\n   * the number of decimal places in the account currency to be used for formatting values like balance, \n   * equity, margin and profit.\n   */\n  currencyDigits: number\n}\n\n/**\n * Stop loss threshold\n */\nexport declare type StopLossThreshold = {\n\n  /**\n   * Price threshold to activate next trailing SL at. When `units` is `ABSOLUTE_PRICE`, the value represents the final\n   * price. When `RELATIVE*` units are used, the value represents an offset from the position open price in the\n   * direction of the *profitable* price change (i.e. the `threshold` is added to the open price for buy positions and\n   * decremented from the open price for sell positions).\n   * \n   * You may specify a negative value for this field if it makes any sense from business logic point of view for you.\n   * It may be useful when the trailing stop loss is configured after position has opened and is in a loss,\n   * so the negative threshold would result in a threshold being set in the direction of *profitable* price change \n   * relative to the current price while being located in the *unprofitable* direction relatively to the open price\n   * at the same time.\n   */\n  threshold: number,\n\n  /**\n   * Trailing stop loss value, which shall be interpreted differently according to `units` and `stopBasePrice` field\n   * values.\n   * \n   * When `units` is `ABSOLUTE_PRICE`, the value represents the final price. \n   * \n   * When `RELATIVE*` `units` are used, the value represents an offset from the base price (as defined by\n   * `stopPriceBase`).\n   * \n   * For the `CURRENT_PRICE` `stopPriceBase` value, the stop loss value is interpreted as a distance in the direction of\n   * the *unprofitable* price change (i.e. the `stopLoss` is decremented from the current price for buy positions and \n   * added to the current price for sell positions).\n   * \n   * For the `OPEN_PRICE` `stopPriceBase` value, the stop loss value is interpreted as a distance in the direction of\n   * the *profitable* price change (i.e. the `stopLoss` is added to the open price for buy positions and decremented\n   * from the open price for sell positions).\n   * \n   * You may specify negative value for `stopLoss` field to achieve the effect of reversing a relative stop loss\n   * direction.\n   * \n   * On each trailing SL update, the system will apply the updated SL only if it is valid from the trading rules point\n   * of view. This means that the new SL value must be below market price for buy positions and above market price for\n   * sell positions. This also means that the new SL value must move in the *profitable* price direction compared to the\n   * previous  SL value. If any of these conditions does not hold true, the trailing SL update will be skipped.\n   */\n  stopLoss: number\n}\n\n/**\n * Threshold trailing stop loss configuration\n */\nexport declare type ThresholdTrailingStopLoss = {\n\n  /**\n   * Stop loss thresholds\n   */\n  thresholds: StopLossThreshold[],\n\n  /**\n   * Threshold stop loss units. ABSOLUTE_PRICE means the that the value of stop loss threshold fields contain a\n   * final threshold & stop loss value. RELATIVE* means that the threshold fields value contains relative \n   * threshold & stop loss values, expressed either in price, points, pips, account currency or balance percentage.\n   * Default is ABSOLUTE_PRICE. One of ABSOLUTE_PRICE, RELATIVE_PRICE, RELATIVE_POINTS, RELATIVE_PIPS,\n   * RELATIVE_CURRENCY, RELATIVE_BALANCE_PERCENTAGE\n   */\n  units?: string,\n\n  /**\n   * Defined the base price to calculate SL relative to for POSITION_MODIFY and pending order requests. Default\n   * is OPEN_PRICE. One of CURRENT_PRICE, OPEN_PRICE\n   */\n  stopPriceBase?: string\n}\n\n/**\n * Distance trailing stop loss configuration\n */\nexport declare type DistanceTrailingStopLoss = {\n\n  /**\n   * SL distance relative to current price, interpreted according to units field value\n   */\n  distance?: number,\n\n  /**\n   * Distance trailing stop loss units. RELATIVE_* means that the distance field value contains relative\n   * stop loss expressed either in price, points, pips, account currency or balance percentage. Default is\n   * RELATIVE_PRICE. One of RELATIVE_PRICE, RELATIVE_POINTS, RELATIVE_PIPS, RELATIVE_CURRENCY,\n   * RELATIVE_BALANCE_PERCENTAGE\n   */\n  units?: string\n}\n\n/**\n * Distance trailing stop loss configuration\n */\nexport declare type TrailingStopLoss = {\n\n  /**\n   * Distance trailing stop loss configuration. If both distance and threshold TSL are set, then the\n   * resulting SL will be the one which is closest to the current price\n   */\n  distance?: DistanceTrailingStopLoss\n\n  /**\n   * Threshold trailing stop loss configuration. If both distance and threshold TSL are set, then the\n   * resulting SL will be the one which is closest to the current price\n   */\n  threshold?: ThresholdTrailingStopLoss\n}\n\n/**\n * MetaTrader position\n */\nexport declare type MetatraderPosition = {\n\n  /**\n   * position id (ticket number)\n   */\n  id: number,\n\n  /**\n   * position type (one of POSITION_TYPE_BUY, POSITION_TYPE_SELL)\n   */\n  type: string,\n\n  /**\n   * position symbol\n   */\n  symbol: string,\n\n  /**\n   * position magic number, identifies the EA which opened the position\n   */\n  magic: number,\n\n  /**\n   * time position was opened at\n   */\n  time: Date,\n\n  /**\n   * time position was opened at, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  brokerTime: string,\n\n  /**\n   * last position modification time\n   */\n  updateTime: Date,\n\n  /**\n   * position open price\n   */\n  openPrice: number,\n\n  /**\n   * current price\n   */\n  currentPrice: number,\n\n  /**\n   * current tick value\n   */\n  currentTickValue: number,\n\n  /**\n   * optional position stop loss price\n   */\n  stopLoss?: number,\n\n  /**\n   * optional position take profit price\n   */\n  takeProfit?: number,\n\n  /**\n   * position volume\n   */\n  volume: number,\n\n  /**\n   * position cumulative swap, including both swap from currently open position part (unrealized\n   * swap) and swap from partially closed position part (realized swap)\n   */\n  swap: number,\n\n  /**\n   * swap from partially closed position part\n   */\n  realizedSwap: number,\n\n  /**\n   * swap resulting from currently open position part\n   */\n  unrealizedSwap: number,\n\n  /**\n   * position cumulative profit, including unrealized profit resulting from currently open position part (except swap\n   * and commissions) and realized profit resulting from partially closed position part and including swap and\n   * commissions\n   */\n  profit: number,\n\n  /**\n   * optional position comment. The sum of the line lengths of the comment and the clientId must be less than or equal\n   * to 30 if both clientId and comment are specified, or 31 otherwise. Note, that MT4 accepts only latin1\n   * symbols, while MT5 accepts UTF-16. For more information see https://metaapi.cloud/docs/client/clientIdUsage/\n   */\n  comment?: string,\n\n  /**\n   * optional client-assigned id. The id value can be assigned when submitting a trade and\n   * will be present on position, history orders and history deals related to the trade. You can use this field to bind\n   * your trades to objects in your application and then track trade progress. The sum of the line lengths of the\n   * comment and the clientId must be less than or equal to 30 if both clientId and comment are specified, or 31\n   * otherwise. For more information see https://metaapi.cloud/docs/client/clientIdUsage/\n   */\n  clientId?: string,\n\n  /**\n   * profit of the part of the position which is not yet closed, excluding swap and commissions\n   */\n  unrealizedProfit: number,\n\n  /**\n   * profit of the already closed part, including commissions and swap (realized and unrealized)\n   */\n  realizedProfit: number,\n\n  /**\n   * total position commissions, resulting both from currently open and closed position parts\n   */\n  commission: number,\n\n  /**\n   * position realized commission, resulting from partially closed position part\n   */\n  realizedCommission: number,\n\n  /**\n   * position unrealized commission, resulting from currently open position part\n   */\n  unrealizedCommission: number,\n\n  /**\n   * position opening reason. One of POSITION_REASON_CLIENT, POSITION_REASON_EXPERT,\n   * POSITION_REASON_MOBILE, POSITION_REASON_WEB, POSITION_REASON_UNKNOWN. See\n   * https://www.mql5.com/en/docs/constants/tradingconstants/positionproperties#enum_position_reason',\n   */\n  reason: string,\n\n  /**\n   * current exchange rate of account currency into account base\n   * currency (USD if you did not override it)\n   */\n  accountCurrencyExchangeRate?: number,\n\n  /**\n   * current comment value on broker side (possibly overriden by the broker)\n   */\n  brokerComment?: string\n}\n\n/**\n * MetaTrader order\n */\nexport declare type MetatraderOrder = {\n\n  /**\n   * order id (ticket number)\n   */\n  id: number,\n\n  /**\n   * order type (one of ORDER_TYPE_SELL, ORDER_TYPE_BUY, ORDER_TYPE_BUY_LIMIT,\n   * ORDER_TYPE_SELL_LIMIT, ORDER_TYPE_BUY_STOP, ORDER_TYPE_SELL_STOP, ORDER_TYPE_BUY_STOP_LIMIT,\n   * ORDER_TYPE_SELL_STOP_LIMIT, ORDER_TYPE_CLOSE_BY). See\n   * https://www.mql5.com/en/docs/constants/tradingconstants/orderproperties#enum_order_type\n   */\n  type: string,\n\n  /**\n   * order state one of (ORDER_STATE_STARTED, ORDER_STATE_PLACED, ORDER_STATE_CANCELED,\n   * ORDER_STATE_PARTIAL, ORDER_STATE_FILLED, ORDER_STATE_REJECTED, ORDER_STATE_EXPIRED, ORDER_STATE_REQUEST_ADD,\n   * ORDER_STATE_REQUEST_MODIFY, ORDER_STATE_REQUEST_CANCEL). See\n   * https://www.mql5.com/en/docs/constants/tradingconstants/orderproperties#enum_order_state\n   */\n  state: string,\n\n  /**\n   * order magic number, identifies the EA which created the order\n   */\n  magic: number,\n\n  /**\n   * time order was created at\n   */\n  time: Date,\n\n  /**\n   * time time order was created at, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  brokerTime: string,\n\n  /**\n   * time order was executed or canceled at. Will be specified for\n   * completed orders only\n   */\n  doneTime?: Date,\n\n  /**\n   * time order was executed or canceled at, in broker timezone,\n   * YYYY-MM-DD HH:mm:ss.SSS format. Will be specified for completed orders only\n   */\n  doneBrokerTime?: string,\n\n  /**\n   * order symbol\n   */\n  symbol: string,\n\n  /**\n   * order open price (market price for market orders, limit price for limit orders or stop\n   * price for stop orders)\n   */\n  openPrice: number,\n\n  /**\n   * current price, filled for pending orders only. Not filled for history orders.\n   */\n  currentPrice?: number,\n\n  /**\n   * order stop loss price\n   */\n  stopLoss?: number,\n\n  /**\n   * order take profit price\n   */\n  takeProfit?: number,\n\n  /**\n   * order requested quantity\n   */\n  volume: number,\n\n  /**\n   * order remaining quantity, i.e. requested quantity - filled quantity\n   */\n  currentVolume: number,\n\n  /**\n   * order position id. Present only if the order has a position attached to it\n   */\n  positionId: string,\n\n  /**\n   * order comment. The sum of the line lengths of the comment and the clientId must be less than or equal\n   * to 30 if both clientId and comment are specified, or 31 otherwise. Note, that MT4 accepts only latin1\n   * symbols, while MT5 accepts UTF-16. For more information see https://metaapi.cloud/docs/client/clientIdUsage/\n   */\n  comment?: string,\n\n  /**\n   * current comment value on broker side (possibly overriden by the broker)\n   */\n  brokerComment?: string,\n\n  /**\n   * client-assigned id. The id value can be assigned when submitting a trade and\n   * will be present on position, history orders and history deals related to the trade. You can use this field to bind\n   * your trades to objects in your application and then track trade progress. The sum of the line lengths of the\n   * comment and the clientId must be less than or equal to 30 if both clientId and comment are specified, or 31\n   * otherwise. For more information see https://metaapi.cloud/docs/client/clientIdUsage/\n   */\n  clientId?: string,\n\n  /**\n   * platform id (mt4 or mt5)\n   */\n  platform: string,\n\n  /**\n   * order opening reason. One of ORDER_REASON_CLIENT, ORDER_REASON_MOBILE, ORDER_REASON_WEB,\n   * ORDER_REASON_EXPERT, ORDER_REASON_SL, ORDER_REASON_TP, ORDER_REASON_SO, ORDER_REASON_UNKNOWN. See\n   * https://www.mql5.com/en/docs/constants/tradingconstants/orderproperties#enum_order_reason.\n   */\n  reason: string,\n\n  /**\n   * order filling mode. One of ORDER_FILLING_FOK, ORDER_FILLING_IOC,\n   * ORDER_FILLING_RETURN. See\n   * https://www.mql5.com/en/docs/constants/tradingconstants/orderproperties#enum_order_type_filling.\n   */\n  fillingMode: string,\n\n  /**\n   * order expiration type. One of ORDER_TIME_GTC, ORDER_TIME_DAY,\n   * ORDER_TIME_SPECIFIED, ORDER_TIME_SPECIFIED_DAY. See\n   * https://www.mql5.com/en/docs/constants/tradingconstants/orderproperties#enum_order_type_time\n   */\n  expirationType: string,\n\n  /**\n   * optional order expiration time\n   */\n  expirationTime: Date,\n\n  /**\n   * current exchange rate of account currency into account base\n   * currency (USD if you did not override it)\n   */\n  accountCurrencyExchangeRate?: number,\n\n  /**\n   * identifier of an opposite position used for closing by order\n   * ORDER_TYPE_CLOSE_BY\n   */\n  closeByPositionId?: string,\n\n  /**\n   * the Limit order price for the StopLimit order\n   */\n  stopLimitPrice?: number\n}\n\n/**\n * MetaTrader history orders search query response\n */\nexport declare type MetatraderHistoryOrders = {\n\n  /**\n   * array of history orders returned\n   */\n  historyOrders: Array<MetatraderOrder>,\n\n  /**\n   * flag indicating that history order initial synchronization is still in progress\n   * and thus search results may be incomplete\n   */\n  synchronizing: boolean\n}\n\n/**\n * MetaTrader history deals search query response\n */\nexport declare type MetatraderDeals = {\n\n  /**\n   * array of history deals returned\n   */\n  deals: Array<MetatraderDeal>,\n\n  /**\n   * flag indicating that deal initial synchronization is still in progress\n   * and thus search results may be incomplete\n   */\n  synchronizing: boolean\n}\n\n/**\n * MetaTrader deal\n */\nexport declare type MetatraderDeal = {\n\n  /**\n   * deal id (ticket number)\n   */\n  id: string,\n\n  /**\n   * deal type (one of DEAL_TYPE_BUY, DEAL_TYPE_SELL, DEAL_TYPE_BALANCE, DEAL_TYPE_CREDIT,\n   * DEAL_TYPE_CHARGE, DEAL_TYPE_CORRECTION, DEAL_TYPE_BONUS, DEAL_TYPE_COMMISSION, DEAL_TYPE_COMMISSION_DAILY,\n   * DEAL_TYPE_COMMISSION_MONTHLY, DEAL_TYPE_COMMISSION_AGENT_DAILY, DEAL_TYPE_COMMISSION_AGENT_MONTHLY,\n   * DEAL_TYPE_INTEREST, DEAL_TYPE_BUY_CANCELED, DEAL_TYPE_SELL_CANCELED, DEAL_DIVIDEND, DEAL_DIVIDEND_FRANKED,\n   * DEAL_TAX). See https://www.mql5.com/en/docs/constants/tradingconstants/dealproperties#enum_deal_type\n   */\n  type: string,\n\n  /**\n   * deal entry type (one of DEAL_ENTRY_IN, DEAL_ENTRY_OUT, DEAL_ENTRY_INOUT,\n   * DEAL_ENTRY_OUT_BY). See https://www.mql5.com/en/docs/constants/tradingconstants/dealproperties#enum_deal_entry\n   */\n  entryType: string,\n\n  /**\n   * symbol deal relates to\n   */\n  symbol?: string,\n\n  /**\n   * deal magic number, identifies the EA which initiated the deal\n   */\n  magic?: number,\n\n  /**\n   * time the deal was conducted at\n   */\n  time: Date,\n\n  /**\n   * time time the deal was conducted at, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  brokerTime: string,\n\n  /**\n   * deal volume\n   */\n  volume?: number,\n\n  /**\n   * the price the deal was conducted at\n   */\n  price?: number,\n\n  /**\n   * deal commission\n   */\n  commission?: number,\n\n  /**\n   * deal swap\n   */\n  swap?: number,\n\n  /**\n   * deal profit\n   */\n  profit: number,\n\n  /**\n   * id of position the deal relates to\n   */\n  positionId?: string,\n\n  /**\n   * id of order the deal relates to\n   */\n  orderId?: string,\n\n  /**\n   * deal comment. The sum of the line lengths of the comment and the clientId must be less than or equal\n   * to 30 if both clientId and comment are specified, or 31 otherwise. Note, that MT4 accepts only latin1\n   * symbols, while MT5 accepts UTF-16. For more information see https://metaapi.cloud/docs/client/clientIdUsage/\n   */\n  comment?: string,\n\n  /**\n   * current comment value on broker side (possibly overriden by the broker)\n   */\n  brokerComment?: string,\n\n  /**\n   * client-assigned id. The id value can be assigned when submitting a trade and\n   * will be present on position, history orders and history deals related to the trade. You can use this field to bind\n   * your trades to objects in your application and then track trade progress. The sum of the line lengths of the\n   * comment and the clientId must be less than or equal to 26. For more information see\n   * https://metaapi.cloud/docs/client/clientIdUsage/\n   */\n  clientId: string,\n\n  /**\n   * platform id (mt4 or mt5)\n   */\n  platform: string,\n\n  /**\n   * optional deal execution reason. One of DEAL_REASON_CLIENT, DEAL_REASON_MOBILE,\n   * DEAL_REASON_WEB, DEAL_REASON_EXPERT, DEAL_REASON_SL, DEAL_REASON_TP, DEAL_REASON_SO, DEAL_REASON_ROLLOVER,\n   * DEAL_REASON_VMARGIN, DEAL_REASON_SPLIT, DEAL_REASON_UNKNOWN. See\n   * https://www.mql5.com/en/docs/constants/tradingconstants/dealproperties#enum_deal_reason.\n   */\n  reason?: string,\n\n  /**\n   * current exchange rate of account currency into account base\n   * currency (USD if you did not override it)\n   */\n  accountCurrencyExchangeRate?: number,\n\n  /**\n   * deal stop loss. For MT5 opening deal this is the SL of the order opening the\n   * position. For MT4 deals or MT5 closing deal this is the last known position SL.\n   */\n  stopLoss?: number,\n\n  /**\n   * deal take profit. For MT5 opening deal this is the TP of the order opening the\n   * position. For MT4 deals or MT5 closing deal this is the last known position TP.\n   */\n  takeProfit?: number\n}\n\n/**\n * MetaTrader trade response\n */\nexport declare type MetatraderTradeResponse = {\n\n  /**\n   * numeric response code, see\n   * https://www.mql5.com/en/docs/constants/errorswarnings/enum_trade_return_codes and\n   * https://book.mql4.com/appendix/errors. Response codes which indicate success are 0, 10008-10010, 10025. The rest\n   * codes are errors\n   */\n  numericCode: number,\n\n  /**\n   * string response code, see\n   * https://www.mql5.com/en/docs/constants/errorswarnings/enum_trade_return_codes and\n   * https://book.mql4.com/appendix/errors. Response codes which indicate success are ERR_NO_ERROR,\n   * TRADE_RETCODE_PLACED, TRADE_RETCODE_DONE, TRADE_RETCODE_DONE_PARTIAL, TRADE_RETCODE_NO_CHANGES. The rest codes are\n   * errors.\n   */\n  stringCode: string,\n\n  /**\n   * human-readable response message\n   */\n  message: string,\n\n  /**\n   * order id which was created/modified during the trade\n   */\n  orderId: string,\n\n  /**\n   * position id which was modified during the trade\n   */\n  positionId: string\n}\n\n/**\n * Market data subscription\n */\nexport declare type MarketDataSubscription = {\n\n  /**\n   * subscription type, one of quotes, candles, ticks, or marketDepth\n   */\n  type: string,\n\n  /**\n   * when subscription type is candles, defines the timeframe according to which the\n   * candles must be generated. Allowed values for MT5 are 1m, 2m, 3m, 4m, 5m, 6m, 10m, 12m, 15m, 20m, 30m, 1h, 2h, 3h,\n   * 4h, 6h, 8h, 12h, 1d, 1w, 1mn. Allowed values for MT4 are 1m, 5m, 15m 30m, 1h, 4h, 1d, 1w, 1mn. Required when\n   * subscribing to candles\n   */\n  timeframe?: string,\n\n  /**\n   * defines how frequently the terminal will stream data to client. If not\n   * set, then the value configured in account will be used\n   */\n  intervalInMilliseconds?: number\n}\n\n/**\n * Market data unsubscription\n */\nexport declare type MarketDataUnsubscription = {\n\n  /**\n   * subscription type, one of quotes, candles, ticks, or marketDepth\n   */\n  type: string,\n\n  /**\n   * when subscription type is candles, defines the timeframe to unsubscribe from. Allowed values for MT5 are 1m, 2m,\n   * 3m, 4m, 5m, 6m, 10m, 12m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, 1d, 1w, 1mn. Allowed values for MT4 are 1m,\n   * 5m, 15m 30m, 1h, 4h, 1d, 1w, 1mn. If not specified, unsubscribes from all subscribed timeframes\n   */\n  timeframe?: string\n}\n\n/**\n * MetaTrader symbol specification. Contains symbol specification (see\n * https://metaapi.cloud/docs/client/models/metatraderSymbolSpecification/)\n */\nexport declare type MetatraderSymbolSpecification = {\n\n  /**\n   * symbol (e.g. a currency pair or an index)\n   */\n  symbol: string,\n\n  /**\n   * tick size\n   */\n  tickSize: number,\n\n  /**\n   * minimum order volume for the symbol\n   */\n  minVolume: number,\n\n  /**\n   * maximum order volume for the symbol\n   */\n  maxVolume: number,\n\n  /**\n   * order volume step for the symbol\n   */\n  volumeStep: number,\n\n  /**\n   * of allowed order filling modes. Can contain SYMBOL_FILLING_FOK, SYMBOL_FILLING_IOC, SYMBOL_FILLING_BOC,\n   * SYMBOL_FILLING_RETURN or their combination. See\n   * https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#symbol_filling_mode for more details.\n   */\n  fillingModes: Array<string>,\n\n  /**\n   * execution mode. Possible values are SYMBOL_TRADE_EXECUTION_REQUEST,\n   * SYMBOL_TRADE_EXECUTION_INSTANT, SYMBOL_TRADE_EXECUTION_MARKET, SYMBOL_TRADE_EXECUTION_EXCHANGE. See\n   * https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_trade_execution for more\n   * details.\n   */\n  deal: string,\n\n  /**\n   * trade contract size\n   */\n  contractSize: number,\n\n  /**\n   * quote sessions, indexed by day of week\n   */\n  quoteSessions: MetatraderSessions,\n\n  /**\n   * trade sessions, indexed by day of week\n   */\n  tradeSessions: MetatraderSessions,\n\n  /**\n   * order execution type. Possible values are SYMBOL_TRADE_MODE_DISABLED,\n   * SYMBOL_TRADE_MODE_LONGONLY, SYMBOL_TRADE_MODE_SHORTONLY, SYMBOL_TRADE_MODE_CLOSEONLY, SYMBOL_TRADE_MODE_FULL. See\n   * https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_trade_mode for more\n   * details\n   */\n  tradeMode?: string,\n\n  /**\n   * accrued interest – accumulated coupon interest, i.e. part of the coupon\n   * interest calculated in proportion to the number of days since the coupon bond issuance or the last coupon interest\n   * payment\n   */\n  bondAccruedInterest?: number,\n\n  /**\n   * face value – initial bond value set by the issuer\n   */\n  bondFaceValue?: number,\n\n  /**\n   * the strike price of an option. The price at which an option buyer can buy (in a\n   * Call option) or sell (in a Put option) the underlying asset, and the option seller is obliged to sell or buy the\n   * appropriate amount of the underlying asset.\n   */\n  optionStrike?: number,\n\n  /**\n   * option/warrant sensitivity shows by how many points the price of the\n   * option's underlying asset should change so that the price of the option changes by one point\n   */\n  optionPriceSensivity?: number,\n\n  /**\n   * liquidity Rate is the share of the asset that can be used for the margin\n   */\n  liquidityRate?: number,\n\n  /**\n   * initial margin means the amount in the margin currency required for opening a\n   * position with the volume of one lot. It is used for checking a client's assets when he or she enters the market\n   */\n  initialMargin: number,\n\n  /**\n   * the maintenance margin. If it is set, it sets the margin amount in the margin\n   * currency of the symbol, charged from one lot. It is used for checking a client's assets when his/her account state\n   * changes. If the maintenance margin is equal to 0, the initial margin is used\n   */\n  maintenanceMargin: number,\n\n  /**\n   * contract size or margin value per one lot of hedged positions (oppositely directed\n   * positions of one symbol). Two margin calculation methods are possible for hedged positions. The calculation method\n   * is defined by the broker\n   */\n  hedgedMargin?: number,\n\n  /**\n   * calculating hedging margin using the larger leg (Buy or Sell)\n   */\n  hedgedMarginUsesLargerLeg?: boolean,\n\n  /**\n   * margin currency\n   */\n  marginCurrency: string,\n\n  /**\n   * contract price calculation mode. One of SYMBOL_CALC_MODE_UNKNOWN,\n   * SYMBOL_CALC_MODE_FOREX, SYMBOL_CALC_MODE_FOREX_NO_LEVERAGE, SYMBOL_CALC_MODE_FUTURES, SYMBOL_CALC_MODE_CFD,\n   * SYMBOL_CALC_MODE_CFDINDEX, SYMBOL_CALC_MODE_CFDLEVERAGE, SYMBOL_CALC_MODE_EXCH_STOCKS,\n   * SYMBOL_CALC_MODE_EXCH_FUTURES, SYMBOL_CALC_MODE_EXCH_FUTURES_FORTS, SYMBOL_CALC_MODE_EXCH_BONDS,\n   * SYMBOL_CALC_MODE_EXCH_STOCKS_MOEX, SYMBOL_CALC_MODE_EXCH_BONDS_MOEX, SYMBOL_CALC_MODE_SERV_COLLATERAL. See\n   * https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_calc_mode for more details\n   */\n  priceCalculationMode: string,\n\n  /**\n   * base currency\n   */\n  baseCurrency: string,\n\n  /**\n   * profit currency\n   */\n  profitCurrency?: string,\n\n  /**\n   * swap calculation model. Allowed values are SYMBOL_SWAP_MODE_DISABLED,\n   * SYMBOL_SWAP_MODE_POINTS, SYMBOL_SWAP_MODE_CURRENCY_SYMBOL, SYMBOL_SWAP_MODE_CURRENCY_MARGIN,\n   * SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT, SYMBOL_SWAP_MODE_INTEREST_CURRENT, SYMBOL_SWAP_MODE_INTEREST_OPEN,\n   * SYMBOL_SWAP_MODE_REOPEN_CURRENT, SYMBOL_SWAP_MODE_REOPEN_BID. See\n   * https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_swap_mode for more details\n   */\n  swapMode: string,\n\n  /**\n   * long swap value\n   */\n  swapLong?: number,\n\n  /**\n   * short swap value\n   */\n  swapShort?: number,\n\n  /**\n   * symbol swap rates for each day of the week, starting with Sunday. Only available for MT5 accounts.\n   */\n  swapRates?: number[]\n\n  /**\n   * day of week to charge 3 days swap rollover. Allowed values are SUNDAY,\n   * MONDAY, TUESDAY, WEDNESDAY, THURDAY, FRIDAY, SATURDAY, NONE\n   */\n  swapRollover3Days?: string,\n\n  /**\n   * allowed order expiration modes. Allowed values are\n   * SYMBOL_EXPIRATION_GTC, SYMBOL_EXPIRATION_DAY, SYMBOL_EXPIRATION_SPECIFIED, SYMBOL_EXPIRATION_SPECIFIED_DAY.\n   * See https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#symbol_expiration_mode for more\n   * details\n   */\n  allowedExpirationModes: Array<string>,\n\n  /**\n   * allowed order types. Allowed values are SYMBOL_ORDER_MARKET,\n   * SYMBOL_ORDER_LIMIT, SYMBOL_ORDER_STOP, SYMBOL_ORDER_STOP_LIMIT, SYMBOL_ORDER_SL, SYMBOL_ORDER_TP,\n   * SYMBOL_ORDER_CLOSEBY. See\n   * https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#symbol_order_mode for more details\n   */\n  allowedOrderTypes: Array<string>,\n\n  /**\n   * if the expirationMode property is set to SYMBOL_EXPIRATION_GTC (good till\n   * canceled), the expiration of pending orders, as well as of Stop Loss/Take Profit orders should be additionally set\n   * using this enumeration. Allowed values are SYMBOL_ORDERS_GTC, SYMBOL_ORDERS_DAILY,\n   * SYMBOL_ORDERS_DAILY_EXCLUDING_STOPS. See\n   * https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_order_gtc_mode for more\n   * details\n   */\n  orderGTCMode?: string,\n\n  /**\n   * digits after a decimal point\n   */\n  digits: number,\n\n  /**\n   * point size\n   */\n  point: number,\n\n  /**\n   * path in the symbol tree\n   */\n  path?: string,\n\n  /**\n   * symbol description\n   */\n  description: string,\n\n  /**\n   * date of the symbol trade beginning (usually used for futures)\n   */\n  startTime?: Date,\n\n  /**\n   * date of the symbol trade end (usually used for futures)\n   */\n  expirationTime?: Date,\n\n  /**\n   * size of a pip. Pip size is defined for spot and CFD symbols only\n   */\n  pipSize?: number,\n\n  /**\n   * minimal distance from the current market price to stop price (SL, TP, open price) in\n   * points. The SL, TP, open price can not be placed closer to market price than this distance\n   */\n  stopsLevel: number,\n\n  /**\n   * distance to freeze trade operations in points\n   */\n  freezeLevel: number\n\n}\n\n/**\n * MetaTrader symbol price. Contains current price for a symbol (see\n * https://metaapi.cloud/docs/client/models/metatraderSymbolPrice/)\n */\nexport declare type MetatraderSymbolPrice = {\n\n  /**\n   * symbol (e.g. a currency pair or an index)\n   */\n  symbol: string,\n\n  /**\n   * bid price\n   */\n  bid: number,\n\n  /**\n   * ask price\n   */\n  ask: number,\n\n  /**\n   * tick value for a profitable position\n   */\n  profitTickValue: number,\n\n  /**\n   * tick value for a losing position\n   */\n  lossTickValue: number,\n\n  /**\n   * current exchange rate of account currency into account base\n   * currency (USD if you did not override it)\n   */\n  accountCurrencyExchangeRate?: number,\n\n  /**\n   * quote time, in ISO format\n   */\n  time: Date,\n\n  /**\n   * time quote time, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  brokerTime: string\n}\n\n/**\n * MetaTrader candle\n */\nexport declare type MetatraderCandle = {\n\n  /**\n   * symbol (e.g. currency pair or an index)\n   */\n  symbol: string,\n\n  /**\n   * timeframe candle was generated for, e.g. 1h. One of 1m, 2m, 3m, 4m, 5m, 6m, 10m, 12m,\n   * 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, 1d, 1w, 1mn\n   */\n  timeframe: string,\n\n  /**\n   * candle opening time\n   */\n  time: Date,\n\n  /**\n   * candle opening time, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  brokerTime: string,\n\n  /**\n   * open price\n   */\n  open: number,\n\n  /**\n   * high price\n   */\n  high: number,\n\n  /**\n   * low price\n   */\n  low: number,\n\n  /**\n   * close price\n   */\n  close: number,\n\n  /**\n   * tick volume, i.e. number of ticks inside the candle\n   */\n  tickVolume: number,\n\n  /**\n   * spread in points\n   */\n  spread: number,\n\n  /**\n   * trade volume\n   */\n  volume: number\n}\n\n/**\n * MetaTrader tick data\n */\nexport declare type MetatraderTick = {\n\n  /**\n   * symbol (e.g. a currency pair or an index)\n   */\n  symbol: string,\n\n  /**\n   * time\n   */\n  time: Date,\n\n  /**\n   * time, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  brokerTime: string,\n\n  /**\n   * bid price\n   */\n  bid?: number,\n\n  /**\n   * ask price\n   */\n  ask?: number,\n\n  /**\n   * last deal price\n   */\n  last?: number,\n\n  /**\n   * volume for the current last deal price\n   */\n  volume?: number,\n\n  /**\n   * is tick a result of buy or sell deal, one of buy or sell\n   */\n  side?: string\n}\n\n/**\n * MetaTrader order book\n */\nexport declare type MetatraderBook = {\n\n  /**\n   * symbol (e.g. a currency pair or an index)\n   */\n  symbol: string,\n\n  /**\n   * time\n   */\n  time: Date,\n\n  /**\n   * time, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  brokerTime: string,\n\n  /**\n   * list of order book entries\n   */\n  book: Array<MetatraderBookEntry>\n}\n\n/**\n *  MetaTrader trade\n */\nexport declare type MetatraderTrade = {\n\n  /**\n   * type, enum: ORDER_TYPE_SELL, ORDER_TYPE_BUY, ORDER_TYPE_BUY_LIMIT, ORDER_TYPE_SELL_LIMIT,ORDER_TYPE_BUY_STOP,\n   * ORDER_TYPE_SELL_STOP, POSITION_MODIFY, POSITION_PARTIAL, POSITION_CLOSE_ID,POSITIONS_CLOSE_SYMBOL, ORDER_MODIFY,\n   * ORDER_CANCEL, POSITION_CLOSE_BY, ORDER_TYPE_BUY_STOP_LIMIT, ORDER_TYPE_SELL_STOP_LIMIT.\n   */\n  actionType: string,\n\n  /**\n   * symbol to trade\n   */\n  symbol?: string,\n\n  /**\n   * order volume\n   */\n  volume?: number,\n\n  /**\n   * order limit or stop price\n   */\n  openPrice?: number,\n\n  /**\n   * stop loss price\n   */\n  stopLoss?: number,\n\n  /**\n   * take profit price\n   */\n  takeProfit?: number,\n\n  /**\n   * stop loss units. ABSOLUTE_PRICE means the that the value of stopLoss field is a final stop loss value. RELATIVE_*\n   * means that the stopLoss field value contains relative stop loss expressed either in price, points, account currency\n   * or balance percentage. Default is ABSOLUTE_PRICE. enum: ABSOLUTE_PRICE, RELATIVE_PRICE, RELATIVE_POINTS,\n   * RELATIVE_CURRENCY, RELATIVE_BALANCE_PERCENTAGE\n   */\n  stopLossUnits?: string,\n\n  /**\n   * take profit units. ABSOLUTE_PRICE means the that the value of takeProfit field is a final take profit value.\n   * RELATIVE_* means that the takeProfit field value contains relative take profit expressed either in price, points,\n   * account currency or balance percentage. Default is ABSOLUTE_PRICE. enum: ABSOLUTE_PRICE, RELATIVE_PRICE,\n   * RELATIVE_POINTS, RELATIVE_CURRENCY, RELATIVE_BALANCE_PERCENTAGE\n   */\n  takeProfitUnits?: string,\n\n  /**\n   * order id, must be specified for order modification commands\n   */\n  orderId?: string,\n\n  /**\n   * position id, must be specified for position modification commands\n   */\n  positionId?: string,\n\n  /**\n   * order comment. The sum of the line lengths of the comment and the clientId must be less than or equal\n   * to 30 if both clientId and comment are specified, or 31 otherwise. Note, that MT4 accepts only latin1\n   * symbols, while MT5 accepts UTF-16. For more information see clientId usage\n   */\n  comment?: string,\n\n  /**\n   * client-assigned id. The id value can be assigned when submitting a trade and will be present on position, history\n   * orders and history deals related to the trade. You can use this field to bind your trades to objects in your\n   * application and then track trade progress. The sum of the line lengths of the comment and the clientId must be less\n   * than or equal to 30 if both clientId and comment are specified, or 31 otherwise. For more information see\n   * https://metaapi.cloud/docs/client/clientIdUsage/\n   */\n  clientId?: string,\n\n  /**\n   * magic number (expert adviser id)\n   */\n  magic?: number,\n\n  /**\n   * slippage in points. Should be greater or equal to zero. In not set, default value specified in account entity will\n   * be used. Slippage is ignored on position modification, order modification and order cancellation calls. Slippage is\n   * also ignored if execution mode set in symbol specification is SYMBOL_TRADE_EXECUTION_MARKET.\n   */\n  slippage?: number,\n\n  /**\n   * allowed filling modes in the order of priority. Default is to allow all filling modes and prefer ORDER_FILLING_FOK\n   * over ORDER_FILLING_IOC. See\n   * https://www.mql5.com/en/docs/constants/tradingconstants/orderproperties#enum_order_type_filling for extra\n   * explanation.\n   */\n  fillingModes?: Array<string>,\n\n  /**\n   * pending order expiration settings. See Pending order expiration settings section.\n   */\n  expiration?: Object,\n\n  /**\n   * identifier of an opposite position used for closing by order, required in case actionType is POSITION_CLOSE_BY\n   */\n  closeByPositionId?: string,\n\n  /**\n   * optional price at which the StopLimit order will be placed. Required for stop limit orders\n   */\n  stopLimitPrice?: number\n}\n\n/**\n * Metatrader trade or quote session\n */\nexport declare type MetatraderSession = {\n\n  /**\n   * session start time, in hh.mm.ss.SSS format\n   */\n  from: string,\n\n  /**\n   * session end time, in hh.mm.ss.SSS format\n   */\n  to: string\n}\n\n/**\n * Metatrader trade or quote session container, indexed by weekday\n */\nexport declare type MetatraderSessions = {\n\n  /**\n   * array of sessions for SUNDAY\n   */\n  SUNDAY?: Array<MetatraderSession>,\n\n  /**\n   * array of sessions for MONDAY\n   */\n  MONDAY?: Array<MetatraderSession>,\n\n  /**\n   * array of sessions for TUESDAY\n   */\n  TUESDAY?: Array<MetatraderSession>,\n\n  /**\n   * array of sessions for WEDNESDAY\n   */\n  WEDNESDAY?: Array<MetatraderSession>,\n\n  /**\n   * array of sessions for THURSDAY\n   */\n  THURSDAY?: Array<MetatraderSession>,\n\n  /**\n   * array of sessions for FRIDAY\n   */\n  FRIDAY?: Array<MetatraderSession>,\n\n  /**\n   * array of sessions for SATURDAY\n   */\n  SATURDAY?: Array<MetatraderSession>\n}\n\n/**\n * MetaTrader order book entry\n */\nexport declare type MetatraderBookEntry = {\n\n  /**\n   * entry type, one of BOOK_TYPE_SELL, BOOK_TYPE_BUY, BOOK_TYPE_SELL_MARKET,\n   * BOOK_TYPE_BUY_MARKET\n   */\n  type: string,\n\n  /**\n   * price\n   */\n  price: number,\n\n  /**\n   * volume\n   */\n  volume: number\n}\n\n/**\n * Current server time (see https://metaapi.cloud/docs/client/models/serverTime/)\n */\nexport declare type ServerTime = {\n\n  /**\n   * Current server time\n   */\n  time: Date,\n\n  /**\n   * Current broker time, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  brokerTime: string,\n\n  /**\n   * Last quote time\n   */\n  lastQuoteTime?: Date,\n\n  /**\n   * Last quote time, in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format\n   */\n  lastQuoteBrokerTime?: string\n\n}\n\n/**\n * Margin required to open a trade (see https://metaapi.cloud/docs/client/models/margin/)\n */\nexport declare type Margin = {\n\n  /**\n   * Margin required to open a trade. If margin can not be calculated, then this field is not defined\n   */\n  margin?: number\n\n}\n\n/**\n * Contains order to calculate margin for (see https://metaapi.cloud/docs/client/models/marginOrder/)\n */\nexport declare type MarginOrder = {\n\n    /**\n     * Order symbol\n     */\n    symbol: string,\n\n    /**\n     * Order type, one of ORDER_TYPE_BUY or ORDER_TYPE_SELL\n     */\n    type: string,\n\n    /**\n     * Order volume, must be greater than 0\n     */\n    volume: number,\n\n    /**\n     * Order open price, must be greater than 0\n     */\n    openPrice: number\n\n}\n\n/**\n * Refreshed quotes and some of account information\n */\nexport declare type RefreshedQuotes = {\n  /**\n   * Refreshed quotes\n   */\n  quotes: MetatraderSymbolPrice[],\n  /**\n   * Actual account balance\n   */\n  balance: number,\n  /**\n   * Actual account equity\n   */\n  equity: number,\n  /**\n   * Actual account margin\n   */\n  margin: number,\n  /**\n   * Actual account free margin\n   */\n  freeMargin: number,\n  /**\n   * Actual account margin level\n   */\n  marginLevel: number,\n  /**\n   * Actual account currency exchange rate\n   */\n  accountCurrencyExchangeRate: number\n}\n\n/**\n * Options for `getAccountInformation` rpc request\n */\nexport type GetAccountInformationOptions = RefreshTerminalStateFlag;\n/**\n * Options for `getPositions` rpc request\n */\nexport type GetPositionsOptions = RefreshTerminalStateFlag;\n/**\n * Options for `getPosition` rpc request\n */\nexport type GetPositionOptions = RefreshTerminalStateFlag;\n/**\n * Options for `getOrders` rpc request\n */\nexport type GetOrdersOptions = RefreshTerminalStateFlag;\n/**\n * Options for `getOrder` rpc request\n */\nexport type GetOrderOptions = RefreshTerminalStateFlag;\n\n/**\n * Refresh terminal state option flag for some requests\n */\nexport type RefreshTerminalStateFlag = {\n  /**\n   * Whether to refresh terminal state before retrieving the data, slowing down the request\n   */\n  refreshTerminalState?: boolean\n}\n"],"names":[],"mappings":"AAAA;;CAEC"}