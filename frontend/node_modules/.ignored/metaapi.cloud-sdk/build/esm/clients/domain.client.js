'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import LoggerManager from '../logger';
let DomainClient = class DomainClient {
    /**
   * Returns domain client domain
   * @returns {String} client domain
   */ get domain() {
        return this._domain;
    }
    /**
   * Returns domain client token
   * @returns {String} client token
   */ get token() {
        return this._token;
    }
    /**
   * Returns the API URL
   * @param {String} host REST API host
   * @param {String} region host region
   * @returns {String} API URL
   */ getUrl(host, region) {
        var _this = this;
        return _async_to_generator(function*() {
            yield _this._updateDomain();
            return `${host}.${region}.${_this._urlCache.domain}`;
        })();
    }
    /**
   * Returns domain settings
   * @returns {DomainSettings} domain settings
   */ getSettings() {
        var _this = this;
        return _async_to_generator(function*() {
            yield _this._updateDomain();
            return {
                domain: _this._urlCache.domain,
                hostname: _this._urlCache.hostname
            };
        })();
    }
    _updateDomain() {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this._urlCache.domain || _this._urlCache.lastUpdated < Date.now() - 1000 * 60 * 10) {
                if (_this._urlCache.requestPromise) {
                    yield _this._urlCache.requestPromise;
                } else {
                    let resolve, reject;
                    _this._urlCache.requestPromise = new Promise((res, rej)=>{
                        resolve = res, reject = rej;
                    });
                    let isCacheUpdated = false;
                    while(!isCacheUpdated){
                        const opts = {
                            url: `https://mt-provisioning-api-v1.${_this._domain}/users/current/servers/mt-client-api`,
                            method: 'GET',
                            headers: {
                                'auth-token': _this._token
                            },
                            json: true
                        };
                        try {
                            const urlSettings = yield _this._httpClient.request(opts, '_updateDomain');
                            _this._urlCache = {
                                domain: urlSettings.domain,
                                hostname: urlSettings.hostname,
                                requestPromise: null,
                                lastUpdated: Date.now()
                            };
                            resolve();
                            isCacheUpdated = true;
                            _this._retryIntervalInSeconds = 1;
                        } catch (err) {
                            _this._logger.error('Failed to update domain settings cache', err);
                            _this._retryIntervalInSeconds = Math.min(_this._retryIntervalInSeconds * 2, 300);
                            yield new Promise((res)=>setTimeout(res, _this._retryIntervalInSeconds * 1000));
                        }
                    }
                }
            }
        })();
    }
    /**
   * Constructs domain client instance
   * @param {HttpClient} httpClient HTTP client
   * @param {String} token authorization token
   * @param {String} domain domain to connect to, default is agiliumtrade.agiliumtrade.ai
   */ constructor(httpClient, token, domain = 'agiliumtrade.agiliumtrade.ai'){
        _define_property(this, "_httpClient", void 0);
        _define_property(this, "_domain", void 0);
        _define_property(this, "_token", void 0);
        _define_property(this, "_urlCache", void 0);
        _define_property(this, "_retryIntervalInSeconds", void 0);
        _define_property(this, "_logger", void 0);
        this._httpClient = httpClient;
        this._domain = domain;
        this._token = token;
        this._urlCache = {
            domain: null,
            hostname: null,
            requestPromise: null,
            lastUpdated: 0
        };
        this._retryIntervalInSeconds = 1;
        this._logger = LoggerManager.getLogger('DomainClient');
    }
};
/**
 * Connection URL managing client
 */ export { DomainClient as default };

//# sourceMappingURL=data:application/json;base64,