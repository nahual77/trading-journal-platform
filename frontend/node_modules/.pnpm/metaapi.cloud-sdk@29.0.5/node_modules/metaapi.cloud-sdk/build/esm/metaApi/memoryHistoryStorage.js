'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import HistoryStorage from './historyStorage';
import HistoryDatabase from './historyDatabase/index';
import { AVLTree } from 'binary-search-tree';
import LoggerManager from '../logger';
let MemoryHistoryStorage = class MemoryHistoryStorage extends HistoryStorage {
    /**
   * Initializes the storage and loads required data from a persistent storage
   * @param {string} accountId account id
   * @param {string} [application] application. Default is MetaApi
   */ initialize(accountId, application = 'MetaApi') {
        var _this = this, _superprop_get_initialize = ()=>super.initialize;
        return _async_to_generator(function*() {
            yield _superprop_get_initialize().call(_this, accountId, application);
            let { deals, historyOrders } = yield _this._historyDatabase.loadHistory(accountId, application);
            for (let deal of deals){
                yield _this._addDeal(deal, true);
            }
            for (let historyOrder of historyOrders){
                yield _this._addHistoryOrder(historyOrder, true);
            }
        })();
    }
    /**
   * Resets the storage. Intended for use in tests
   * @returns {Promise} promise when the history is removed
   */ clear() {
        var _this = this;
        return _async_to_generator(function*() {
            _this._reset();
            yield _this._historyDatabase.clear(_this._accountId, _this._application);
        })();
    }
    /**
   * Returns the time of the last history order record stored in the history storage
   * @param {Number} [instanceNumber] index of an account instance connected
   * @returns {Date} the time of the last history order record stored in the history storage
   */ lastHistoryOrderTime(instanceNumber) {
        return this._maxHistoryOrderTime;
    }
    /**
   * Returns the time of the last history deal record stored in the history storage
   * @param {Number} [instanceNumber] index of an account instance connected
   * @returns {Date} the time of the last history deal record stored in the history storage
   */ lastDealTime(instanceNumber) {
        return this._maxDealTime;
    }
    /**
   * Invoked when a new MetaTrader history order is added
   * @param {String} instanceIndex index of an account instance connected
   * @param {MetatraderOrder} historyOrder new MetaTrader history order
   */ onHistoryOrderAdded(instanceIndex, historyOrder) {
        var _this = this;
        return _async_to_generator(function*() {
            yield _this._addHistoryOrder(historyOrder);
        })();
    }
    /**
   * Invoked when a new MetaTrader history deal is added
   * @param {String} instanceIndex index of an account instance connected
   * @param {MetatraderDeal} deal new MetaTrader history deal
   */ onDealAdded(instanceIndex, deal) {
        var _this = this;
        return _async_to_generator(function*() {
            yield _this._addDeal(deal);
        })();
    }
    /**
   * Returns all deals
   * @returns {Array<MetatraderDeal>} all deals
   */ get deals() {
        return this.getDealsByTimeRange(new Date(0), new Date(8640000000000000));
    }
    /**
   * Returns deals by ticket id
   * @param {string} id ticket id
   * @returns {Array<MetatraderDeal>} deals found
   */ getDealsByTicket(id) {
        let deals = Object.values(this._dealsByTicket[id] || {});
        deals.sort(this._dealsComparator);
        return deals;
    }
    /**
   * Returns deals by position id
   * @param {string} positionId position id
   * @returns {Array<MetatraderDeal>} deals found
   */ getDealsByPosition(positionId) {
        let deals = Object.values(this._dealsByPosition[positionId] || {});
        deals.sort(this._dealsComparator);
        return deals;
    }
    /**
   * Returns deals by time range
   * @param startTime start time, inclusive
   * @param endTime end time, inclusive
   * @returns {Array<MetatraderDeal>} deals found
   */ getDealsByTimeRange(startTime, endTime) {
        let deals = this._dealsByTime.betweenBounds({
            $gte: {
                time: startTime,
                id: 0,
                entryType: ''
            },
            $lte: {
                time: endTime,
                id: Number.MAX_VALUE,
                entryType: ''
            }
        });
        return deals;
    }
    /**
   * Returns all history orders
   * @returns {Array<MetatraderOrder>} all history orders
   */ get historyOrders() {
        return this.getHistoryOrdersByTimeRange(new Date(0), new Date(8640000000000000));
    }
    /**
   * Returns history orders by ticket id
   * @param {string} id ticket id
   * @returns {Array<MetatraderOrder>} history orders found
   */ getHistoryOrdersByTicket(id) {
        let historyOrders = Object.values(this._historyOrdersByTicket[id] || {});
        historyOrders.sort(this._historyOrdersComparator);
        return historyOrders;
    }
    /**
   * Returns history orders by position id
   * @param {string} positionId position id
   * @returns {Array<MetatraderOrder>} history orders found
   */ getHistoryOrdersByPosition(positionId) {
        let historyOrders = Object.values(this._historyOrdersByPosition[positionId] || {});
        historyOrders.sort(this._historyOrdersComparator);
        return historyOrders;
    }
    /**
   * Returns history orders by time range
   * @param startTime start time, inclusive
   * @param endTime end time, inclusive
   * @returns {Array<MetatraderOrder>} hisotry orders found
   */ getHistoryOrdersByTimeRange(startTime, endTime) {
        let historyOrders = this._historyOrdersByTime.betweenBounds({
            $gte: {
                doneTime: startTime,
                id: 0,
                type: '',
                state: ''
            },
            $lte: {
                doneTime: endTime,
                id: Number.MAX_VALUE,
                type: '',
                state: ''
            }
        });
        return historyOrders;
    }
    /**
   * Invoked when a synchronization of history deals on a MetaTrader account have finished to indicate progress of an
   * initial terminal state synchronization
   * @param {String} instanceIndex index of an account instance connected
   * @param {String} synchronizationId synchronization request id
   * @return {Promise} promise which resolves when the asynchronous event is processed
   */ onDealsSynchronized(instanceIndex, synchronizationId) {
        var _this = this, _superprop_get_onDealsSynchronized = ()=>super.onDealsSynchronized;
        return _async_to_generator(function*() {
            yield _this._flushDatabase();
            yield _superprop_get_onDealsSynchronized().call(_this, instanceIndex, synchronizationId);
        })();
    }
    _reset() {
        this._orderSynchronizationFinished = {};
        this._dealSynchronizationFinished = {};
        this._dealsByTicket = {};
        this._dealsByPosition = {};
        this._historyOrdersByTicket = {};
        this._historyOrdersByPosition = {};
        // eslint-disable-next-line complexity
        this._historyOrdersComparator = (o1, o2)=>{
            let timeDiff = (o1.doneTime || new Date(0)).getTime() - (o2.doneTime || new Date(0)).getTime();
            if (timeDiff === 0) {
                let idDiff = o1.id - o2.id;
                if (idDiff === 0) {
                    if (o1.type > o2.type) {
                        return 1;
                    } else if (o1.type < o2.type) {
                        return -1;
                    } else {
                        if (o1.state > o2.state) {
                            return 1;
                        } else if (o1.state < o2.state) {
                            return -1;
                        } else {
                            return 0;
                        }
                    }
                } else {
                    return idDiff;
                }
            } else {
                return timeDiff;
            }
        };
        this._historyOrdersByTime = new AVLTree({
            compareKeys: this._historyOrdersComparator
        });
        this._dealsComparator = (d1, d2)=>{
            let timeDiff = (d1.time || new Date(0)).getTime() - (d2.time || new Date(0)).getTime();
            if (timeDiff === 0) {
                let idDiff = d1.id - d2.id;
                if (idDiff === 0) {
                    if (d1.entryType > d2.entryType) {
                        return 1;
                    } else if (d1.entryType < d2.entryType) {
                        return -1;
                    } else {
                        return 0;
                    }
                } else {
                    return idDiff;
                }
            } else {
                return timeDiff;
            }
        };
        this._dealsByTime = new AVLTree({
            compareKeys: this._dealsComparator
        });
        this._maxHistoryOrderTime = new Date(0);
        this._maxDealTime = new Date(0);
        this._newHistoryOrders = [];
        this._newDeals = [];
        clearTimeout(this._flushTimeout);
        delete this._flushTimeout;
    }
    // eslint-disable-next-line complexity
    _addDeal(deal, existing) {
        var _this = this;
        return _async_to_generator(function*() {
            let key = _this._getDealKey(deal);
            _this._dealsByTicket[deal.id] = _this._dealsByTicket[deal.id] || {};
            let newDeal = !existing && !_this._dealsByTicket[deal.id][key];
            _this._dealsByTicket[deal.id][key] = deal;
            if (deal.positionId) {
                _this._dealsByPosition[deal.positionId] = _this._dealsByPosition[deal.positionId] || {};
                _this._dealsByPosition[deal.positionId][key] = deal;
            }
            _this._dealsByTime.delete(deal);
            _this._dealsByTime.insert(deal, deal);
            if (deal.time && (!_this._maxDealTime || _this._maxDealTime.getTime() < deal.time.getTime())) {
                _this._maxDealTime = deal.time;
            }
            if (newDeal) {
                _this._newDeals.push(deal);
                clearTimeout(_this._flushTimeout);
                _this._flushTimeout = setTimeout(_this._flushDatabase.bind(_this), 5000);
            }
        })();
    }
    _getDealKey(deal) {
        return (deal.time || new Date(0)).toISOString() + ':' + deal.id + ':' + deal.entryType;
    }
    // eslint-disable-next-line complexity
    _addHistoryOrder(historyOrder, existing) {
        var _this = this;
        return _async_to_generator(function*() {
            let key = _this._getHistoryOrderKey(historyOrder);
            _this._historyOrdersByTicket[historyOrder.id] = _this._historyOrdersByTicket[historyOrder.id] || {};
            let newHistoryOrder = !existing && !_this._historyOrdersByTicket[historyOrder.id][key];
            _this._historyOrdersByTicket[historyOrder.id][key] = historyOrder;
            if (historyOrder.positionId) {
                _this._historyOrdersByPosition[historyOrder.positionId] = _this._historyOrdersByPosition[historyOrder.positionId] || {};
                _this._historyOrdersByPosition[historyOrder.positionId][key] = historyOrder;
            }
            _this._historyOrdersByTime.delete(historyOrder);
            _this._historyOrdersByTime.insert(historyOrder, historyOrder);
            if (historyOrder.doneTime && (!_this._maxHistoryOrderTime || _this._maxHistoryOrderTime.getTime() < historyOrder.doneTime.getTime())) {
                _this._maxHistoryOrderTime = historyOrder.doneTime;
            }
            if (newHistoryOrder) {
                _this._newHistoryOrders.push(historyOrder);
                clearTimeout(_this._flushTimeout);
                _this._flushTimeout = setTimeout(_this._flushDatabase.bind(_this), 5000);
            }
        })();
    }
    _getHistoryOrderKey(historyOrder) {
        return (historyOrder.doneTime || new Date(0)).toISOString() + ':' + historyOrder.id + ':' + historyOrder.type + ':' + historyOrder.state;
    }
    _flushDatabase() {
        var _this = this;
        return _async_to_generator(function*() {
            if (_this._flushPromise) {
                yield _this._flushPromise;
            }
            if (_this._flushRunning) {
                return;
            }
            _this._flushRunning = true;
            let resolve;
            _this._flushPromise = new Promise((res)=>resolve = res);
            try {
                yield _this._historyDatabase.flush(_this._accountId, _this._application, _this._newHistoryOrders, _this._newDeals);
                _this._newHistoryOrders = [];
                _this._newDeals = [];
                _this._logger.debug(`${_this._accountId}: flushed history db`);
            } catch (err) {
                _this._logger.warn(`${_this._accountId}: error flushing history db`, err);
                _this._flushTimeout = setTimeout(_this._flushDatabase.bind(_this), 15000);
            } finally{
                resolve();
                _this._flushRunning = false;
            }
        })();
    }
    /**
   * Constructs the in-memory history store instance
   */ constructor(){
        super();
        this._historyDatabase = HistoryDatabase.getInstance();
        this._reset();
        this._logger = LoggerManager.getLogger('MemoryHistoryStorage');
    }
};
/**
 * History storage which stores MetaTrader history in RAM
 */ export { MemoryHistoryStorage as default };

//# sourceMappingURL=data:application/json;base64,