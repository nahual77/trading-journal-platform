'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
let ProvisioningProfile = class ProvisioningProfile {
    /**
   * Returns profile id
   * @return profile id
   */ get id() {
        return this._data._id;
    }
    /**
   * Returns profile name
   * @return profile name
   */ get name() {
        return this._data.name;
    }
    /**
   * Returns profile version. Possible values are 4 and 5
   * @return {Number} profile version
   */ get version() {
        return this._data.version;
    }
    /**
   * Returns profile status. Possible values are new and active
   * @return profile status
   */ get status() {
        return this._data.status;
    }
    /**
   * Returns broker timezone name from Time Zone Database
   * @return broker timezone name
   */ get brokerTimezone() {
        return this._data.brokerTimezone;
    }
    /**
   * Returns broker DST timezone name from Time Zone Database
   * @return broker DST switch timezone name
   */ get brokerDSTSwitchTimezone() {
        return this._data.brokerDSTSwitchTimezone;
    }
    /**
   * Returns provisioning profile type
   * @return provisioning profile type
   */ get type() {
        return this._data.type;
    }
    /**
   * Reloads provisioning profile from API
   * @return promise resolving when provisioning profile is updated
   */ reload() {
        var _this = this;
        return _async_to_generator(function*() {
            _this._data = yield _this._provisioningProfileClient.getProvisioningProfile(_this.id);
        })();
    }
    /**
   * Removes provisioning profile. The current object instance should be discarded after returned promise resolves.
   * @return promise resolving when provisioning profile is removed
   */ remove() {
        return this._provisioningProfileClient.deleteProvisioningProfile(this.id);
    }
    /**
   * Uploads a file to provisioning profile.
   * @param fileName name of the file to upload. Allowed values are servers.dat for MT5 profile, broker.srv for
   * MT4 profile
   * @param file path to a file to upload or buffer containing file contents
   * @return promise which resolves when the file was uploaded
   */ uploadFile(fileName, file) {
        return this._provisioningProfileClient.uploadProvisioningProfileFile(this.id, fileName, file);
    }
    /**
   * Updates provisioning profile
   * @param profile provisioning profile update
   * @return promise resolving when provisioning profile is updated
   */ update(profile) {
        var _this = this;
        return _async_to_generator(function*() {
            yield _this._provisioningProfileClient.updateProvisioningProfile(_this.id, profile);
            yield _this.reload();
        })();
    }
    /**
   * Constructs a provisioning profile entity
   * @param data provisioning profile data
   * @param provisioningProfileClient provisioning profile REST API client
   */ constructor(data, provisioningProfileClient){
        _define_property(this, "_data", void 0);
        _define_property(this, "_provisioningProfileClient", void 0);
        this._data = data;
        this._provisioningProfileClient = provisioningProfileClient;
    }
};
/**
 * Implements a provisioning profile entity
 */ export { ProvisioningProfile as default };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7XG4gIFByb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQsIFByb3Zpc2lvbmluZ1Byb2ZpbGVEdG8sIFByb3Zpc2lvbmluZ1Byb2ZpbGVUeXBlLCBQcm92aXNpb25pbmdQcm9maWxlVXBkYXRlRHRvXG59IGZyb20gJy4uL2NsaWVudHMvbWV0YUFwaS9wcm92aXNpb25pbmdQcm9maWxlLmNsaWVudCc7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIHByb3Zpc2lvbmluZyBwcm9maWxlIGVudGl0eVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm92aXNpb25pbmdQcm9maWxlIHtcbiAgXG4gIHByaXZhdGUgX2RhdGE6IFByb3Zpc2lvbmluZ1Byb2ZpbGVEdG87XG4gIHByaXZhdGUgX3Byb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQ6IFByb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQ7XG4gIFxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIHByb3Zpc2lvbmluZyBwcm9maWxlIGVudGl0eVxuICAgKiBAcGFyYW0gZGF0YSBwcm92aXNpb25pbmcgcHJvZmlsZSBkYXRhXG4gICAqIEBwYXJhbSBwcm92aXNpb25pbmdQcm9maWxlQ2xpZW50IHByb3Zpc2lvbmluZyBwcm9maWxlIFJFU1QgQVBJIGNsaWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YTogUHJvdmlzaW9uaW5nUHJvZmlsZUR0bywgcHJvdmlzaW9uaW5nUHJvZmlsZUNsaWVudDogUHJvdmlzaW9uaW5nUHJvZmlsZUNsaWVudCkge1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgIHRoaXMuX3Byb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQgPSBwcm92aXNpb25pbmdQcm9maWxlQ2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcHJvZmlsZSBpZFxuICAgKiBAcmV0dXJuIHByb2ZpbGUgaWRcbiAgICovXG4gIGdldCBpZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLl9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHByb2ZpbGUgbmFtZVxuICAgKiBAcmV0dXJuIHByb2ZpbGUgbmFtZVxuICAgKi9cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5uYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcHJvZmlsZSB2ZXJzaW9uLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIDQgYW5kIDVcbiAgICogQHJldHVybiB7TnVtYmVyfSBwcm9maWxlIHZlcnNpb25cbiAgICovXG4gIGdldCB2ZXJzaW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEudmVyc2lvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHByb2ZpbGUgc3RhdHVzLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIG5ldyBhbmQgYWN0aXZlXG4gICAqIEByZXR1cm4gcHJvZmlsZSBzdGF0dXNcbiAgICovXG4gIGdldCBzdGF0dXMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5zdGF0dXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBicm9rZXIgdGltZXpvbmUgbmFtZSBmcm9tIFRpbWUgWm9uZSBEYXRhYmFzZVxuICAgKiBAcmV0dXJuIGJyb2tlciB0aW1lem9uZSBuYW1lXG4gICAqL1xuICBnZXQgYnJva2VyVGltZXpvbmUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5icm9rZXJUaW1lem9uZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGJyb2tlciBEU1QgdGltZXpvbmUgbmFtZSBmcm9tIFRpbWUgWm9uZSBEYXRhYmFzZVxuICAgKiBAcmV0dXJuIGJyb2tlciBEU1Qgc3dpdGNoIHRpbWV6b25lIG5hbWVcbiAgICovXG4gIGdldCBicm9rZXJEU1RTd2l0Y2hUaW1lem9uZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmJyb2tlckRTVFN3aXRjaFRpbWV6b25lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcHJvdmlzaW9uaW5nIHByb2ZpbGUgdHlwZVxuICAgKiBAcmV0dXJuIHByb3Zpc2lvbmluZyBwcm9maWxlIHR5cGVcbiAgICovXG4gIGdldCB0eXBlKCk6IFByb3Zpc2lvbmluZ1Byb2ZpbGVUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS50eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbG9hZHMgcHJvdmlzaW9uaW5nIHByb2ZpbGUgZnJvbSBBUElcbiAgICogQHJldHVybiBwcm9taXNlIHJlc29sdmluZyB3aGVuIHByb3Zpc2lvbmluZyBwcm9maWxlIGlzIHVwZGF0ZWRcbiAgICovXG4gIGFzeW5jIHJlbG9hZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHRoaXMuX2RhdGEgPSBhd2FpdCB0aGlzLl9wcm92aXNpb25pbmdQcm9maWxlQ2xpZW50LmdldFByb3Zpc2lvbmluZ1Byb2ZpbGUodGhpcy5pZCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBwcm92aXNpb25pbmcgcHJvZmlsZS4gVGhlIGN1cnJlbnQgb2JqZWN0IGluc3RhbmNlIHNob3VsZCBiZSBkaXNjYXJkZWQgYWZ0ZXIgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcy5cbiAgICogQHJldHVybiBwcm9taXNlIHJlc29sdmluZyB3aGVuIHByb3Zpc2lvbmluZyBwcm9maWxlIGlzIHJlbW92ZWRcbiAgICovXG4gIHJlbW92ZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9wcm92aXNpb25pbmdQcm9maWxlQ2xpZW50LmRlbGV0ZVByb3Zpc2lvbmluZ1Byb2ZpbGUodGhpcy5pZCk7XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkcyBhIGZpbGUgdG8gcHJvdmlzaW9uaW5nIHByb2ZpbGUuXG4gICAqIEBwYXJhbSBmaWxlTmFtZSBuYW1lIG9mIHRoZSBmaWxlIHRvIHVwbG9hZC4gQWxsb3dlZCB2YWx1ZXMgYXJlIHNlcnZlcnMuZGF0IGZvciBNVDUgcHJvZmlsZSwgYnJva2VyLnNydiBmb3JcbiAgICogTVQ0IHByb2ZpbGVcbiAgICogQHBhcmFtIGZpbGUgcGF0aCB0byBhIGZpbGUgdG8gdXBsb2FkIG9yIGJ1ZmZlciBjb250YWluaW5nIGZpbGUgY29udGVudHNcbiAgICogQHJldHVybiBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHdoZW4gdGhlIGZpbGUgd2FzIHVwbG9hZGVkXG4gICAqL1xuICB1cGxvYWRGaWxlKGZpbGVOYW1lOiBzdHJpbmcsIGZpbGU6IHN0cmluZyB8IEJ1ZmZlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQudXBsb2FkUHJvdmlzaW9uaW5nUHJvZmlsZUZpbGUodGhpcy5pZCwgZmlsZU5hbWUsIGZpbGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgcHJvdmlzaW9uaW5nIHByb2ZpbGVcbiAgICogQHBhcmFtIHByb2ZpbGUgcHJvdmlzaW9uaW5nIHByb2ZpbGUgdXBkYXRlXG4gICAqIEByZXR1cm4gcHJvbWlzZSByZXNvbHZpbmcgd2hlbiBwcm92aXNpb25pbmcgcHJvZmlsZSBpcyB1cGRhdGVkXG4gICAqL1xuICBhc3luYyB1cGRhdGUocHJvZmlsZTogUHJvdmlzaW9uaW5nUHJvZmlsZVVwZGF0ZUR0byk6IFByb21pc2U8YW55PiB7XG4gICAgYXdhaXQgdGhpcy5fcHJvdmlzaW9uaW5nUHJvZmlsZUNsaWVudC51cGRhdGVQcm92aXNpb25pbmdQcm9maWxlKHRoaXMuaWQsIHByb2ZpbGUpO1xuICAgIGF3YWl0IHRoaXMucmVsb2FkKCk7XG4gIH1cblxufVxuIl0sIm5hbWVzIjpbIlByb3Zpc2lvbmluZ1Byb2ZpbGUiLCJpZCIsIl9kYXRhIiwiX2lkIiwibmFtZSIsInZlcnNpb24iLCJzdGF0dXMiLCJicm9rZXJUaW1lem9uZSIsImJyb2tlckRTVFN3aXRjaFRpbWV6b25lIiwidHlwZSIsInJlbG9hZCIsIl9wcm92aXNpb25pbmdQcm9maWxlQ2xpZW50IiwiZ2V0UHJvdmlzaW9uaW5nUHJvZmlsZSIsInJlbW92ZSIsImRlbGV0ZVByb3Zpc2lvbmluZ1Byb2ZpbGUiLCJ1cGxvYWRGaWxlIiwiZmlsZU5hbWUiLCJmaWxlIiwidXBsb2FkUHJvdmlzaW9uaW5nUHJvZmlsZUZpbGUiLCJ1cGRhdGUiLCJwcm9maWxlIiwidXBkYXRlUHJvdmlzaW9uaW5nUHJvZmlsZSIsImNvbnN0cnVjdG9yIiwiZGF0YSIsInByb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU2UsSUFBQSxBQUFNQSxzQkFBTixNQUFNQTtJQWVuQjs7O0dBR0MsR0FDRCxJQUFJQyxLQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsR0FBRztJQUN2QjtJQUVBOzs7R0FHQyxHQUNELElBQUlDLE9BQWU7UUFDakIsT0FBTyxJQUFJLENBQUNGLEtBQUssQ0FBQ0UsSUFBSTtJQUN4QjtJQUVBOzs7R0FHQyxHQUNELElBQUlDLFVBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDSCxLQUFLLENBQUNHLE9BQU87SUFDM0I7SUFFQTs7O0dBR0MsR0FDRCxJQUFJQyxTQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDSSxNQUFNO0lBQzFCO0lBRUE7OztHQUdDLEdBQ0QsSUFBSUMsaUJBQXlCO1FBQzNCLE9BQU8sSUFBSSxDQUFDTCxLQUFLLENBQUNLLGNBQWM7SUFDbEM7SUFFQTs7O0dBR0MsR0FDRCxJQUFJQywwQkFBa0M7UUFDcEMsT0FBTyxJQUFJLENBQUNOLEtBQUssQ0FBQ00sdUJBQXVCO0lBQzNDO0lBRUE7OztHQUdDLEdBQ0QsSUFBSUMsT0FBZ0M7UUFDbEMsT0FBTyxJQUFJLENBQUNQLEtBQUssQ0FBQ08sSUFBSTtJQUN4QjtJQUVBOzs7R0FHQyxHQUNELEFBQU1DOztlQUFOLG9CQUFBO1lBQ0UsTUFBS1IsS0FBSyxHQUFHLE1BQU0sTUFBS1MsMEJBQTBCLENBQUNDLHNCQUFzQixDQUFDLE1BQUtYLEVBQUU7UUFDbkY7O0lBRUE7OztHQUdDLEdBQ0RZLFNBQXVCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDRiwwQkFBMEIsQ0FBQ0cseUJBQXlCLENBQUMsSUFBSSxDQUFDYixFQUFFO0lBQzFFO0lBRUE7Ozs7OztHQU1DLEdBQ0RjLFdBQVdDLFFBQWdCLEVBQUVDLElBQXFCLEVBQWdCO1FBQ2hFLE9BQU8sSUFBSSxDQUFDTiwwQkFBMEIsQ0FBQ08sNkJBQTZCLENBQUMsSUFBSSxDQUFDakIsRUFBRSxFQUFFZSxVQUFVQztJQUMxRjtJQUVBOzs7O0dBSUMsR0FDRCxBQUFNRSxPQUFPQyxPQUFxQzs7ZUFBbEQsb0JBQUE7WUFDRSxNQUFNLE1BQUtULDBCQUEwQixDQUFDVSx5QkFBeUIsQ0FBQyxNQUFLcEIsRUFBRSxFQUFFbUI7WUFDekUsTUFBTSxNQUFLVixNQUFNO1FBQ25COztJQXJHQTs7OztHQUlDLEdBQ0RZLFlBQVlDLElBQTRCLEVBQUVDLHlCQUFvRCxDQUFFO1FBUmhHLHVCQUFRdEIsU0FBUixLQUFBO1FBQ0EsdUJBQVFTLDhCQUFSLEtBQUE7UUFRRSxJQUFJLENBQUNULEtBQUssR0FBR3FCO1FBQ2IsSUFBSSxDQUFDWiwwQkFBMEIsR0FBR2E7SUFDcEM7QUErRkY7QUEvR0E7O0NBRUMsR0FDRCxTQUFxQnhCLGlDQTRHcEIifQ==