'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import MetaApiClient from '../metaApi.client';
import LoggerManager from '../../logger';
import { NotFoundError } from '../errorHandler';
let ClientApiClient = class ClientApiClient extends MetaApiClient {
    /**
   * Type hashing ignored field lists
   * @typedef {Object} TypeHashingIgnoredFieldLists
   * @property {String[]} specification specification ignored fields
   * @property {String[]} position position ignored fields
   * @property {String[]} order order ignored fields
   */ /**
   * Hashing ignored field lists
   * @typedef {Object} HashingIgnoredFieldLists
   * @property {TypeHashingIgnoredFieldLists} g1 g1 hashing ignored field lists
   * @property {TypeHashingIgnoredFieldLists} g2 g2 hashing ignored field lists
   */ /**
   * Refreshes hashing ignored field lists
   * @param {String} region account region
   * @returns {Promise} promise resolving when the hashing field lists are updated.
   */ refreshIgnoredFieldLists(region) {
        var _this = this;
        return _async_to_generator(function*() {
            if (_this._ignoredFieldListsCaches[region] && _this._ignoredFieldListsCaches[region].requestPromise) {
                yield _this._ignoredFieldListsCaches[region].requestPromise;
            } else if (_this._ignoredFieldListsCaches[region] && Date.now() - _this._ignoredFieldListsCaches[region].lastUpdated < _this._updateInterval) {
                return;
            } else {
                if (!_this._ignoredFieldListsCaches[region]) {
                    _this._ignoredFieldListsCaches[region] = {
                        lastUpdated: 0,
                        data: null,
                        requestPromise: null,
                        updateJob: setInterval(()=>_this._refreshIgnoredFieldListsJob(region), 60000)
                    };
                }
                let resolve, reject;
                _this._ignoredFieldListsCaches[region].requestPromise = new Promise((res, rej)=>{
                    resolve = res, reject = rej;
                });
                let isCacheUpdated = false;
                while(!isCacheUpdated){
                    try {
                        const host = yield _this._domainClient.getUrl(_this._host, region);
                        const opts = {
                            url: `${host}/hashing-ignored-field-lists`,
                            method: 'GET',
                            json: true,
                            headers: {
                                'auth-token': _this._token
                            }
                        };
                        const response = yield _this._httpClient.request(opts, 'getHashingIgnoredFieldLists');
                        _this._ignoredFieldListsCaches[region] = {
                            lastUpdated: Date.now(),
                            data: response,
                            requestPromise: null
                        };
                        _this._ignoredFieldListsFreshestCache = response;
                        resolve(response);
                        isCacheUpdated = true;
                        _this._ignoredFieldListsCaches[region].retryIntervalInSeconds = _this._retryIntervalInSeconds;
                    } catch (err) {
                        _this._logger.error('Failed to update hashing ignored field list', err);
                        _this._ignoredFieldListsCaches[region].retryIntervalInSeconds = Math.min(_this._ignoredFieldListsCaches[region].retryIntervalInSeconds * 2, 300);
                        yield new Promise((res)=>setTimeout(res, _this._ignoredFieldListsCaches[region].retryIntervalInSeconds * 1000));
                    }
                }
            }
        })();
    }
    /**
   * Retrieves hashing ignored field lists
   * @param {String} region account region
   * @returns {HashingIgnoredFieldLists} promise resolving with hashing ignored field lists
   */ getHashingIgnoredFieldLists(region) {
        if (region === 'combined') {
            if (this._ignoredFieldListsFreshestCache) {
                return this._ignoredFieldListsFreshestCache;
            } else {
                throw new NotFoundError('Ignored field lists not found');
            }
        }
        if (this._ignoredFieldListsCaches[region] && this._ignoredFieldListsCaches[region].data) {
            return this._ignoredFieldListsCaches[region].data;
        } else {
            throw new NotFoundError(`Ignored field lists for region ${region} not found`);
        }
    }
    _refreshIgnoredFieldListsJob(region) {
        var _this = this;
        return _async_to_generator(function*() {
            if (!_this._ignoredFieldListsCaches[region].requestPromise && Date.now() - _this._ignoredFieldListsCaches[region].lastUpdated > _this._updateInterval) {
                yield _this.refreshIgnoredFieldLists(region);
            }
        })();
    }
    /**
   * Constructs client API client instance
   * @param {HttpClient} httpClient HTTP client
   * @param {DomainClient} domainClient domain client
   */ constructor(httpClient, domainClient){
        super(httpClient, domainClient);
        _define_property(this, "_retryIntervalInSeconds", void 0);
        _define_property(this, "_updateInterval", void 0);
        _define_property(this, "_ignoredFieldListsCaches", void 0);
        _define_property(this, "_ignoredFieldListsFreshestCache", void 0);
        _define_property(this, "_logger", void 0);
        this._host = 'https://mt-client-api-v1';
        this._retryIntervalInSeconds = 1;
        this._updateInterval = 60 * 60 * 1000;
        this._ignoredFieldListsCaches = {};
        this._ignoredFieldListsFreshestCache = null;
        this._logger = LoggerManager.getLogger('ClientApiClient');
    }
};
/**
 * metaapi.cloud client API client (see https://metaapi.cloud/docs/client/)
 */ export { ClientApiClient as default };

//# sourceMappingURL=data:application/json;base64,