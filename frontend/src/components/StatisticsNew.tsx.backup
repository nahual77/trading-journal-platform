import React, { useMemo, useState, useEffect, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import {
    TrendingUp,
    TrendingDown,
    DollarSign,
    BarChart3,
    PieChart,
    Target,
    Activity,
    Award
} from 'lucide-react';

interface StatisticsProps {
    journals: any[];
    activeJournalId: string | null;
    initialBalances: { [journalId: string]: number };
}

// Componente de gráfica de progresión consolidada usando la lógica del BalanceChart
const ConsolidatedBalanceChart = ({ journals, initialBalances }: { journals: any[], initialBalances: { [key: string]: number } }) => {
    const [hoveredPoint, setHoveredPoint] = useState<any>(null);
    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });
    const [tooltipSide, setTooltipSide] = useState<'left' | 'right'>('right');
    const tooltipRef = useRef<HTMLDivElement>(null);

    const { chartData, totalInitialBalance } = useMemo(() => {
        if (!journals || !Array.isArray(journals)) return { chartData: [], totalInitialBalance: 0 };

        // Combinar todas las operaciones de todos los diarios
        const allEntries = journals.flatMap(journal =>
            (journal.entries || []).map(entry => ({
                ...entry,
                journalId: journal.id,
                journalName: journal.name
            }))
        );

        // Ordenar por fecha y hora (igual que BalanceChart)
        const sortedEntries = allEntries.sort((a, b) => {
            const dateA = new Date(`${a.fecha}T${a.hora}`);
            const dateB = new Date(`${b.fecha}T${b.hora}`);
            if (dateA.getTime() === dateB.getTime()) {
                return a.id.localeCompare(b.id);
            }
            return dateA.getTime() - dateB.getTime();
        });

        // Calcular balance consolidado (igual que BalanceChart)
        const totalInitialBalance = Object.values(initialBalances).reduce((sum, balance) => sum + balance, 0);
        let runningBalance = totalInitialBalance;
        const points = [{ x: 0, y: totalInitialBalance, label: 'Inicio' }];

        sortedEntries.forEach((entry, index) => {
            const benefit = parseFloat(entry.beneficio) || 0;
            runningBalance += benefit;
            points.push({
                x: index + 1,
                y: runningBalance,
                label: `${entry.fecha} ${entry.hora}`,
                entry: entry
            });
        });

        return { chartData: points, totalInitialBalance };
    }, [journals, initialBalances]);


    if (chartData.length === 0) {
        return (
            <div className="h-64 flex items-center justify-center text-gray-400">
                No hay datos para mostrar
            </div>
        );
    }

    // Usar la misma lógica que BalanceChart
    const padding = 60;
    const chartHeight = 400;
    const pointSpacing = 40;

    const chartWidth = useMemo(() => {
        if (chartData.length <= 1) return 800;
        return Math.max(800, chartData.length * pointSpacing + 2 * padding);
    }, [chartData.length, padding, pointSpacing]);

    const maxY = Math.max(...chartData.map(p => p.y), totalInitialBalance + 50);
    const minY = Math.min(...chartData.map(p => p.y), totalInitialBalance - 50);

    const getX = (index: number) => {
        if (chartData.length <= 1) return padding + (chartWidth - 2 * padding) / 2;
        const availableWidth = chartWidth - 2 * padding;
        return padding + (index / (chartData.length - 1)) * availableWidth;
    };

    const getY = (value: number) => {
        if (maxY === minY) return padding + (chartHeight - 2 * padding) / 2;
        return padding + ((maxY - value) / (maxY - minY)) * (chartHeight - 2 * padding);
    };

    // Crear path
    const pathData = chartData.map((point, index) => {
        const x = getX(point.x);
        const y = getY(point.y);
        return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;
    }).join(' ');

    // Efecto para posicionar el tooltip
    useEffect(() => {
        if (hoveredPoint && tooltipRef.current) {
            const tooltip = tooltipRef.current;
            const rect = tooltip.getBoundingClientRect();

            let newX = tooltipPosition.x;
            let newY = tooltipPosition.y;

            // Ajustar si se sale por la derecha
            if (rect.right > window.innerWidth - 5) {
                newX = window.innerWidth - rect.width - 5;
            }

            // Ajustar si se sale por la izquierda
            if (rect.left < 5) {
                newX = 5;
            }

            // Ajustar si se sale por arriba
            if (rect.top < 10) {
                newY = rect.top + rect.height + 20;
            }

            // Ajustar si se sale por abajo
            if (rect.bottom > window.innerHeight - 10) {
                newY = window.innerHeight - rect.height - 10;
            }

            if (newX !== tooltipPosition.x || newY !== tooltipPosition.y) {
                setTooltipPosition({ x: newX, y: newY });
            }
        }
    }, [hoveredPoint, tooltipPosition.x, tooltipPosition.y]);

    return (
        <div className="h-96 relative bg-gray-900/30 rounded-lg p-4">
            <div className="w-full h-full overflow-x-auto">
                <svg width={chartWidth} height={chartHeight} className="overflow-visible">
                    {/* Grid de fondo */}
                    <defs>
                        <linearGradient id="consolidatedGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop offset="0%" stopColor="#10b981" stopOpacity="0.8" />
                            <stop offset="50%" stopColor="#3b82f6" stopOpacity="0.8" />
                            <stop offset="100%" stopColor="#8b5cf6" stopOpacity="0.8" />
                        </linearGradient>
                    </defs>

                    {/* Líneas de grid horizontales */}
                    {[0, 25, 50, 75, 100].map(y => {
                        const yPos = padding + ((100 - y) / 100) * (chartHeight - 2 * padding);
                        return (
                            <line
                                key={y}
                                x1={padding}
                                y1={yPos}
                                x2={chartWidth - padding}
                                y2={yPos}
                                stroke="rgba(75, 85, 99, 0.3)"
                                strokeWidth="1"
                            />
                        );
                    })}

                    {/* Línea de balance */}
                    <path
                        d={pathData}
                        stroke="url(#consolidatedGradient)"
                        strokeWidth="3"
                        fill="none"
                    />

                    {/* Puntos de datos con tooltips */}
                    {chartData.map((point, index) => {
                        const x = getX(point.x);
                        const y = getY(point.y);
                        return (
                            <g key={index}>
                                {/* Área de hover invisible más grande */}
                                <circle
                                    cx={x}
                                    cy={y}
                                    r="20"
                                    fill="transparent"
                                    className="cursor-pointer"
                                    onMouseEnter={(e) => {
                                        console.log('Mouse enter on point:', point);
                                        const rect = e.currentTarget.getBoundingClientRect();
                                        const chartContainer = e.currentTarget.closest('.w-full');
                                        const containerRect = chartContainer?.getBoundingClientRect();

                                        // Calcular posición del tooltip
                                        let tooltipX = rect.left + rect.width / 2;
                                        let tooltipY = rect.top - 30; // Más arriba
                                        let side: 'left' | 'right' = 'right';

                                        // Si está cerca del borde derecho, posicionar hacia la izquierda
                                        if (containerRect && tooltipX > containerRect.right - 200) {
                                            tooltipX = rect.left + rect.width / 2 - 20;
                                            side = 'left';
                                        } else {
                                            tooltipX = rect.left + rect.width / 2 + 20;
                                            side = 'right';
                                        }

                                        setTooltipPosition({
                                            x: tooltipX,
                                            y: tooltipY
                                        });
                                        setTooltipSide(side);
                                        setHoveredPoint(point);
                                    }}
                                    onMouseLeave={() => setHoveredPoint(null)}
                                />
                                {/* Punto visible */}
                                <circle
                                    cx={x}
                                    cy={y}
                                    r="6"
                                    fill="#10b981"
                                    stroke="#ffffff"
                                    strokeWidth="2"
                                    className="pointer-events-none"
                                />
                            </g>
                        );
                    })}

                    {/* Etiquetas de balance */}
                    {[0, 25, 50, 75, 100].map((y, index) => {
                        const value = minY + ((100 - y) / 100) * (maxY - minY);
                        const yPos = padding + ((100 - y) / 100) * (chartHeight - 2 * padding);
                        return (
                            <text
                                key={y}
                                x={padding - 10}
                                y={yPos + 5}
                                fontSize="12"
                                fill="rgba(156, 163, 175, 0.8)"
                                textAnchor="end"
                            >
                                ${value.toFixed(0)}
                            </text>
                        );
                    })}
                </svg>
            </div>

            {/* Tooltip con información relevante para traders */}
            {hoveredPoint && (
                <div
                    ref={tooltipRef}
                    className="fixed z-50 bg-gray-800 border border-gray-600 rounded-lg p-3 shadow-xl max-w-xs"
                    style={{
                        left: tooltipPosition.x,
                        top: tooltipPosition.y,
                        transform: tooltipSide === 'left'
                            ? 'translateX(-100%) translateY(-100%)'
                            : 'translateX(-50%) translateY(-100%)',
                        marginTop: '-10px'
                    }}
                    onMouseEnter={() => setHoveredPoint(hoveredPoint)}
                    onMouseLeave={() => setHoveredPoint(null)}
                >
                    <div className="text-sm">
                        {hoveredPoint.x === 0 ? (
                            // Punto inicial
                            <div>
                                <div className="text-yellow-400 font-semibold mb-2">💰 Balance Inicial</div>
                                <div className="text-green-400 text-lg font-bold">
                                    ${hoveredPoint.y.toFixed(2)}
                                </div>
                                <div className="text-gray-400 text-xs mt-1">
                                    Punto de partida consolidado
                                </div>
                            </div>
                        ) : (
                            // Operaciones
                            <div>
                                <div className="text-yellow-400 font-semibold mb-2">
                                    📊 Operación #{hoveredPoint.x}
                                </div>
                                <div className="space-y-1">
                                    <div className="text-green-400 text-lg font-bold">
                                        Balance: ${hoveredPoint.y.toFixed(2)}
                                    </div>
                                    {hoveredPoint.entry && (
                                        <>
                                            <div className="text-blue-400">
                                                📅 {hoveredPoint.entry.fecha} {hoveredPoint.entry.hora}
                                            </div>
                                            <div className="text-purple-400">
                                                💼 {hoveredPoint.entry.journalName}
                                            </div>
                                            <div className="text-orange-400">
                                                💰 Beneficio: ${(parseFloat(hoveredPoint.entry.beneficio) || 0).toFixed(2)}
                                            </div>
                                            {hoveredPoint.entry.activo && (
                                                <div className="text-cyan-400">
                                                    🎯 Activo: {hoveredPoint.entry.activo}
                                                </div>
                                            )}
                                            {hoveredPoint.entry.tipoOperacion && (
                                                <div className={`${hoveredPoint.entry.tipoOperacion === 'compra' ? 'text-green-400' : 'text-red-400'}`}>
                                                    {hoveredPoint.entry.tipoOperacion === 'compra' ? '📈 Compra' : '📉 Venta'}
                                                </div>
                                            )}
                                        </>
                                    )}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* Información del balance - Bajado para no tapar la gráfica */}
            <div className="absolute bottom-2 left-0 right-0 bg-gray-800/90 backdrop-blur-sm rounded-lg p-3 mx-2">
                <div className="text-sm text-gray-300 mb-1">
                    Progresión de balance consolidada
                </div>
                <div className="flex justify-between items-center text-xs">
                    <div className="text-yellow-400 font-semibold">
                        {chartData.length - 1} operaciones
                    </div>
                    <div className="text-green-400 font-bold">
                        ${totalInitialBalance.toFixed(2)} → ${chartData[chartData.length - 1]?.y.toFixed(2) || '0.00'}
                    </div>
                </div>
            </div>
        </div>
    );
};

// Componente de gráfica de torta con efectos animados
const JournalDistributionChart = ({ journalStats }: { journalStats: any[] }) => {
    const [animationProgress, setAnimationProgress] = useState(0);
    const [hoveredSegment, setHoveredSegment] = useState<number | null>(null);
    const [isVisible, setIsVisible] = useState(false);
    const chartRef = useRef<HTMLDivElement>(null);

    const chartData = useMemo(() => {
        if (!journalStats || journalStats.length === 0) return [];

        const totalOperations = journalStats.reduce((sum, journal) => sum + journal.totalOps, 0);
        if (totalOperations === 0) return [];

        let currentAngle = 0;
        const colors = [
            '#10b981', '#3b82f6', '#8b5cf6', '#f59e0b', '#ef4444',
            '#06b6d4', '#84cc16', '#f97316', '#ec4899', '#6366f1'
        ];

        return journalStats.map((journal, index) => {
            const percentage = (journal.totalOps / totalOperations) * 100;
            const angle = (percentage / 100) * 360;

            const segment = {
                ...journal,
                percentage,
                angle,
                startAngle: currentAngle,
                endAngle: currentAngle + angle,
                color: colors[index % colors.length],
                index
            };

            currentAngle += angle;
            return segment;
        });
    }, [journalStats]);

    // Intersection Observer para activar animación cuando sea visible
    useEffect(() => {
        const observer = new IntersectionObserver(
            ([entry]) => {
                if (entry.isIntersecting && !isVisible) {
                    setIsVisible(true);
                    // Pequeño delay para que se vea la animación
                    setTimeout(() => {
                        setAnimationProgress(1);
                    }, 300);
                }
            },
            { threshold: 0.3 } // Se activa cuando el 30% del elemento es visible
        );

        if (chartRef.current) {
            observer.observe(chartRef.current);
        }

        return () => {
            if (chartRef.current) {
                observer.unobserve(chartRef.current);
            }
        };
    }, [isVisible]);

    if (chartData.length === 0) {
        return (
            <div className="h-64 flex items-center justify-center text-gray-400">
                No hay datos para mostrar
            </div>
        );
    }

    const centerX = 50;
    const centerY = 50;
    const radius = 40; // Aumentar el radio para usar más espacio

    const createArcPath = (startAngle: number, endAngle: number, animatedEndAngle: number) => {
        const start = polarToCartesian(centerX, centerY, radius, endAngle);
        const end = polarToCartesian(centerX, centerY, radius, startAngle);
        const largeArcFlag = animatedEndAngle - startAngle <= 180 ? "0" : "1";

        return [
            "M", centerX, centerY,
            "L", start.x, start.y,
            "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y,
            "Z"
        ].join(" ");
    };

    const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {
        const angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)),
            y: centerY + (radius * Math.sin(angleInRadians))
        };
    };

    return (
        <div ref={chartRef} className="h-80 relative">
            <svg width="100%" height="100%" viewBox="0 0 100 100" className="overflow-visible">
                {chartData.map((segment, index) => {
                    const animatedEndAngle = segment.startAngle + (segment.angle * animationProgress);
                    const isHovered = hoveredSegment === index;
                    const scale = isHovered ? 1.05 : 1;

                    return (
                        <g key={segment.id} transform={`scale(${scale})`} style={{ transformOrigin: `${centerX}px ${centerY}px` }}>
                            <path
                                d={createArcPath(segment.startAngle, segment.endAngle, animatedEndAngle)}
                                fill={segment.color}
                                className="transition-all duration-500 ease-out cursor-pointer hover:opacity-80"
                                style={{
                                    opacity: animationProgress,
                                    transform: `rotate(${segment.startAngle}deg)`,
                                    transformOrigin: `${centerX}px ${centerY}px`
                                }}
                                onMouseEnter={() => setHoveredSegment(index)}
                                onMouseLeave={() => setHoveredSegment(null)}
                            />
                        </g>
                    );
                })}

                {/* Centro del círculo */}
                <circle
                    cx={centerX}
                    cy={centerY}
                    r="15"
                    fill="rgba(31, 41, 55, 0.9)"
                    className="transition-all duration-300"
                />
                <text
                    x={centerX}
                    y={centerY - 5}
                    textAnchor="middle"
                    className="text-sm font-bold fill-white"
                >
                    Total
                </text>
                <text
                    x={centerX}
                    y={centerY + 8}
                    textAnchor="middle"
                    className="text-xs font-medium fill-gray-300"
                >
                    {chartData.reduce((sum, segment) => sum + segment.value, 0)} ops
                </text>
            </svg>

            {/* Leyenda animada */}
            <div className="absolute bottom-0 left-0 right-0 space-y-1">
                {chartData.map((segment, index) => (
                    <div
                        key={segment.id}
                        className={`flex items-center justify-between text-xs transition-all duration-300 ${animationProgress > 0 ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-4'
                            }`}
                        style={{ transitionDelay: `${index * 100}ms` }}
                    >
                        <div className="flex items-center gap-2">
                            <div
                                className="w-3 h-3 rounded-full"
                                style={{ backgroundColor: segment.color }}
                            />
                            <span className="text-gray-300 truncate">{segment.name}</span>
                        </div>
                        <div className="text-yellow-400 font-semibold">
                            {segment.percentage.toFixed(1)}%
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

// Componente simple para gráfica de balance
const SimpleBalanceChart = ({ entries, initialBalance }: { entries: any[], initialBalance: number }) => {
    const balanceData = useMemo(() => {
        const safeInitialBalance = initialBalance || 0;
        if (!entries || entries.length === 0) return [{ x: 0, y: safeInitialBalance }];

        // Ordenar entradas por fecha y hora (igual que BalanceChart original)
        const sortedEntries = [...entries].sort((a, b) => {
            const dateA = new Date(`${a.fecha}T${a.hora}`);
            const dateB = new Date(`${b.fecha}T${b.hora}`);

            if (dateA.getTime() === dateB.getTime()) {
                return a.id.localeCompare(b.id);
            }

            return dateA.getTime() - dateB.getTime();
        });

        let currentBalance = safeInitialBalance;

        // Incluir el punto inicial (balance inicial sin operaciones)
        const data = [{ x: 0, y: safeInitialBalance }];

        // Agregar puntos para cada operación
        sortedEntries.forEach((entry, index) => {
            const benefit = parseFloat(entry.beneficio) || 0;
            currentBalance += benefit;
            data.push({
                x: index + 1, // +1 porque ya incluimos el punto inicial
                y: currentBalance
            });
        });

        return data;
    }, [entries, initialBalance]);

    const safeInitialBalance = initialBalance || 0;
    const maxBalance = Math.max(...balanceData.map(d => d.y), safeInitialBalance);
    const minBalance = Math.min(...balanceData.map(d => d.y), safeInitialBalance);
    const range = maxBalance - minBalance || 1;

    const getX = (index: number) => (index / Math.max(1, balanceData.length - 1)) * 200;
    const getY = (balance: number) => 40 - ((balance - minBalance) / range) * 40;

    return (
        <div className="w-full h-12 bg-gray-700/30 rounded-lg p-2">
            <svg width="100%" height="100%" viewBox="0 0 200 40" className="overflow-visible">
                {/* Línea de balance inicial */}
                <line
                    x1={0}
                    y1={getY(safeInitialBalance)}
                    x2={200}
                    y2={getY(safeInitialBalance)}
                    stroke="rgba(156, 163, 175, 0.3)"
                    strokeWidth="1"
                    strokeDasharray="2,2"
                />

                {/* Línea de progresión */}
                {balanceData.length > 1 && (
                    <polyline
                        points={balanceData.map((point, index) =>
                            `${getX(index)},${getY(point.y)}`
                        ).join(' ')}
                        fill="none"
                        stroke={balanceData[balanceData.length - 1].y >= safeInitialBalance ? "#10b981" : "#ef4444"}
                        strokeWidth="2"
                    />
                )}

                {/* Puntos de datos */}
                {balanceData.map((point, index) => (
                    <circle
                        key={index}
                        cx={getX(index)}
                        cy={getY(point.y)}
                        r="1.5"
                        fill={point.y >= safeInitialBalance ? "#10b981" : "#ef4444"}
                    />
                ))}
            </svg>
        </div>
    );
};

// Función helper para formatear números de forma segura
const safeFormat = (value: any, decimals: number = 2): string => {
    const num = Number(value) || 0;
    return num.toFixed(decimals);
};

const safeFormatCurrency = (value: any): string => {
    const num = Number(value) || 0;
    return num.toLocaleString();
};

export default function StatisticsNew({ journals, activeJournalId, initialBalances }: StatisticsProps) {
    const { t } = useTranslation();
    const [isVisible, setIsVisible] = useState(false);
    const [visibleCards, setVisibleCards] = useState<number[]>([]);


    // Calcular estadísticas globales de forma segura
    const globalStats = useMemo(() => {
        if (!journals || !Array.isArray(journals)) {
            return {
                totalOperations: 0,
                winningOperations: 0,
                losingOperations: 0,
                winRate: 0,
                totalProfit: 0,
                initialBalance: 0,
                currentBalance: 0,
                bestOperation: 0,
                worstOperation: 0,
                averageProfit: 0
            };
        }

        const allEntries = journals.flatMap(journal => journal.entries || []);
        const totalOperations = allEntries.length;
        const winningOperations = allEntries.filter(entry => (entry.beneficio || 0) > 0).length;
        const losingOperations = allEntries.filter(entry => (entry.beneficio || 0) < 0).length;
        const winRate = totalOperations > 0 ? (winningOperations / totalOperations) * 100 : 0;

        const totalProfit = allEntries.reduce((sum, entry) => sum + (entry.beneficio || 0), 0);
        const initialBalance = journals.reduce((sum, journal) => sum + (journal.initialBalance || 0), 0);
        const currentBalance = initialBalance + totalProfit;

        const bestOperation = allEntries.reduce((best, entry) =>
            (entry.beneficio || 0) > (best.beneficio || 0) ? entry : best,
            { beneficio: 0 }
        );

        const worstOperation = allEntries.reduce((worst, entry) =>
            (entry.beneficio || 0) < (worst.beneficio || 0) ? entry : worst,
            { beneficio: 0 }
        );

        return {
            totalOperations,
            winningOperations,
            losingOperations,
            winRate,
            totalProfit,
            initialBalance,
            currentBalance,
            bestOperation: bestOperation.beneficio || 0,
            worstOperation: worstOperation.beneficio || 0,
            averageProfit: totalOperations > 0 ? totalProfit / totalOperations : 0
        };
    }, [journals]);

    // Calcular estadísticas por diario de forma segura
    const journalStats = useMemo(() => {
        if (!journals || !Array.isArray(journals)) {
            return [];
        }

        return journals.map(journal => {
            const entries = journal.entries || [];

            // Ordenar entradas por fecha y hora (igual que BalanceChart original)
            const sortedEntries = [...entries].sort((a, b) => {
                const dateA = new Date(`${a.fecha}T${a.hora}`);
                const dateB = new Date(`${b.fecha}T${b.hora}`);

                if (dateA.getTime() === dateB.getTime()) {
                    return a.id.localeCompare(b.id);
                }

                return dateA.getTime() - dateB.getTime();
            });

            const totalOps = sortedEntries.length;
            const winningOps = sortedEntries.filter(entry => (parseFloat(entry.beneficio) || 0) > 0).length;
            const losingOps = sortedEntries.filter(entry => (parseFloat(entry.beneficio) || 0) < 0).length;
            const winRate = totalOps > 0 ? (winningOps / totalOps) * 100 : 0;

            const totalProfit = sortedEntries.reduce((sum, entry) => {
                const benefit = parseFloat(entry.beneficio) || 0;
                return sum + benefit;
            }, 0);
            const initialBalance = initialBalances[journal.id] || 0;
            const currentBalance = initialBalance + totalProfit;

            const performance = initialBalance > 0 ? (totalProfit / initialBalance) * 100 : 0;
            const averageProfit = totalOps > 0 ? totalProfit / totalOps : 0;

            const bestOperation = sortedEntries.reduce((best, entry) => {
                const benefit = parseFloat(entry.beneficio) || 0;
                const bestBenefit = parseFloat(best.beneficio) || 0;
                return benefit > bestBenefit ? entry : best;
            }, { beneficio: 0 });

            const worstOperation = sortedEntries.reduce((worst, entry) => {
                const benefit = parseFloat(entry.beneficio) || 0;
                const worstBenefit = parseFloat(worst.beneficio) || 0;
                return benefit < worstBenefit ? entry : worst;
            }, { beneficio: 0 });

            return {
                ...journal,
                totalOps,
                winningOps,
                losingOps,
                winRate,
                totalProfit,
                initialBalance,
                currentBalance,
                performance,
                averageProfit,
                bestOperation: bestOperation.beneficio || 0,
                worstOperation: worstOperation.beneficio || 0,
                isProfitable: totalProfit > 0
            };
        });
    }, [journals]);

    // Efecto de animación de entrada
    useEffect(() => {
        setIsVisible(true);

        // Animar las tarjetas de métricas globales
        const globalCards = [0, 1, 2, 3];
        globalCards.forEach((index) => {
            setTimeout(() => {
                setVisibleCards(prev => [...prev, index]);
            }, index * 100);
        });

        // Animar las tarjetas de diarios después de las métricas globales
        const journalCards = journalStats.map((_, index) => index + 4);
        journalCards.forEach((index) => {
            setTimeout(() => {
                setVisibleCards(prev => [...prev, index]);
            }, 400 + (index - 4) * 150);
        });
    }, [journalStats.length]);

    return (
        <div className="space-y-8">
            {/* Header */}
            <div className="text-center mb-8">
                <h1 className="text-4xl font-bold text-yellow-400 mb-4 flex items-center justify-center gap-3">
                    <BarChart3 className="h-10 w-10" />
                    {t('navigation.statistics')}
                </h1>
                <p className="text-xl text-gray-300">
                    {t('statistics.subtitle')}
                </p>
            </div>

            {/* Tarjetas de Diarios - PRIMERO */}
            <div className="mb-8">
                <h2 className="text-2xl font-bold text-white mb-6 flex items-center gap-3">
                    <Award className="h-6 w-6 text-yellow-400" />
                    {t('statistics.byJournal')}
                </h2>

                <div className="flex flex-wrap justify-center gap-4">
                    {journalStats.map((journal, index) => (
                        <div key={journal.id} className={`w-64 bg-gray-800/50 rounded-lg p-4 border border-gray-700/50 hover:border-gray-600/50 transition-all duration-300 ease-out hover:shadow-xl hover:shadow-gray-900/20 hover:-translate-y-1 hover:bg-gray-800/60 transform transition-all duration-600 ease-out ${visibleCards.includes(index + 4)
                            ? 'opacity-100 translate-y-0'
                            : 'opacity-0 translate-y-8'
                            }`}>
                            {/* Header */}
                            <div className="flex items-center justify-between mb-3">
                                <h3 className="text-sm font-semibold text-white flex items-center gap-1">
                                    {journal.name}
                                    {journal.isProfitable ? (
                                        <TrendingUp className="h-3 w-3 text-green-400" />
                                    ) : (
                                        <TrendingDown className="h-3 w-3 text-red-400" />
                                    )}
                                </h3>
                                <div className={`px-1.5 py-0.5 rounded-full text-xs font-medium ${journal.isProfitable
                                    ? 'bg-green-900/30 text-green-400 border border-green-700/50'
                                    : 'bg-red-900/30 text-red-400 border border-red-700/50'
                                    }`}>
                                    {journal.isProfitable ? t('statistics.profitable') : t('statistics.unprofitable')}
                                </div>
                            </div>

                            {/* Métricas */}
                            <div className="space-y-2 mb-3">
                                <div className="flex justify-between items-center">
                                    <span className="text-xs text-gray-400">{t('statistics.currentBalance')}</span>
                                    <span className="text-sm font-semibold text-white">
                                        ${safeFormatCurrency(journal.currentBalance)}
                                    </span>
                                </div>
                                <div className="flex justify-between items-center">
                                    <span className="text-xs text-gray-400">{t('statistics.profitLoss')}</span>
                                    <span className={`text-sm font-semibold ${journal.totalProfit >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                                        {journal.totalProfit >= 0 ? '+' : ''}${safeFormatCurrency(journal.totalProfit)}
                                    </span>
                                </div>
                                <div className="flex justify-between items-center">
                                    <span className="text-xs text-gray-400">{t('statistics.operations')}</span>
                                    <span className="text-xs font-medium text-white">
                                        {journal.totalOps}
                                    </span>
                                </div>
                                <div className="flex justify-between items-center">
                                    <span className="text-xs text-gray-400">{t('statistics.winRate')}</span>
                                    <span className="text-xs font-medium text-white">
                                        {safeFormat(journal.winRate, 1)}%
                                    </span>
                                </div>
                            </div>

                            {/* Gráfica de balance */}
                            <div className="mb-3">
                                <div className="text-xs text-gray-400 mb-1">{t('statistics.balanceProgression')}</div>
                                <SimpleBalanceChart
                                    entries={journal.entries || []}
                                    initialBalance={initialBalances[journal.id] || 0}
                                />
                            </div>

                            {/* Métricas adicionales */}
                            <div className="space-y-1 mb-3">
                                <div className="flex justify-between items-center">
                                    <span className="text-xs text-gray-400">{t('statistics.averagePerOp')}</span>
                                    <span className="text-xs font-medium text-white">
                                        ${safeFormat(journal.averageProfit)}
                                    </span>
                                </div>
                                <div className="flex justify-between items-center">
                                    <span className="text-xs text-gray-400">{t('statistics.bestOperation')}</span>
                                    <span className="text-xs font-medium text-green-400">
                                        +${safeFormat(journal.bestOperation)}
                                    </span>
                                </div>
                                <div className="flex justify-between items-center">
                                    <span className="text-xs text-gray-400">{t('statistics.worstOperation')}</span>
                                    <span className="text-xs font-medium text-red-400">
                                        ${safeFormat(journal.worstOperation)}
                                    </span>
                                </div>
                            </div>

                            {/* Footer */}
                            <div className="pt-2 border-t border-gray-700/50">
                                <div className="flex justify-between items-center text-xs">
                                    <span className="text-gray-400">{t('statistics.performance')}</span>
                                    <span className={`font-medium ${journal.performance >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                                        {journal.performance >= 0 ? '+' : ''}{safeFormat(journal.performance, 2)}%
                                    </span>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            {/* Métricas Globales */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div className={`bg-gradient-to-br from-blue-900/50 to-blue-800/30 rounded-xl p-6 border border-blue-700/30 transition-all duration-300 ease-out hover:shadow-xl hover:shadow-blue-900/20 hover:-translate-y-1 hover:from-blue-900/60 hover:to-blue-800/40 transform transition-all duration-600 ease-out ${visibleCards.includes(0)
                    ? 'opacity-100 translate-y-0'
                    : 'opacity-0 translate-y-8'
                    }`}>
                    <div className="flex items-center justify-between mb-4">
                        <DollarSign className="h-8 w-8 text-blue-400" />
                        <span className="text-sm text-gray-400">{t('statistics.totalBalance')}</span>
                    </div>
                    <div className="text-3xl font-bold text-white mb-1">
                        ${safeFormatCurrency(globalStats.currentBalance)}
                    </div>
                    <div className="text-sm text-gray-400">
                        {t('statistics.initial')}: ${safeFormatCurrency(globalStats.initialBalance)}
                    </div>
                </div>

                <div className={`bg-gradient-to-br from-green-900/50 to-green-800/30 rounded-xl p-6 border border-green-700/30 transition-all duration-300 ease-out hover:shadow-xl hover:shadow-green-900/20 hover:-translate-y-1 hover:from-green-900/60 hover:to-green-800/40 transform transition-all duration-600 ease-out ${visibleCards.includes(1)
                    ? 'opacity-100 translate-y-0'
                    : 'opacity-0 translate-y-8'
                    }`}>
                    <div className="flex items-center justify-between mb-4">
                        <TrendingUp className="h-8 w-8 text-green-400" />
                        <span className="text-sm text-gray-400">{t('statistics.totalProfit')}</span>
                    </div>
                    <div className={`text-3xl font-bold mb-1 ${globalStats.totalProfit >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                        {globalStats.totalProfit >= 0 ? '+' : ''}${safeFormatCurrency(globalStats.totalProfit)}
                    </div>
                    <div className="text-sm text-gray-400">
                        {t('statistics.averagePerOp')}: ${safeFormat(globalStats.averageProfit)}
                    </div>
                </div>

                <div className={`bg-gradient-to-br from-purple-900/50 to-purple-800/30 rounded-xl p-6 border border-purple-700/30 transition-all duration-300 ease-out hover:shadow-xl hover:shadow-purple-900/20 hover:-translate-y-1 hover:from-purple-900/60 hover:to-purple-800/40 transform transition-all duration-600 ease-out ${visibleCards.includes(2)
                    ? 'opacity-100 translate-y-0'
                    : 'opacity-0 translate-y-8'
                    }`}>
                    <div className="flex items-center justify-between mb-4">
                        <Activity className="h-8 w-8 text-purple-400" />
                        <span className="text-sm text-gray-400">{t('statistics.totalOperations')}</span>
                    </div>
                    <div className="text-3xl font-bold text-white mb-1">
                        {globalStats.totalOperations}
                    </div>
                    <div className="text-sm text-gray-400">
                        {t('statistics.winning')}: {globalStats.winningOperations} | {t('statistics.losing')}: {globalStats.losingOperations}
                    </div>
                </div>

                <div className={`bg-gradient-to-br from-yellow-900/50 to-yellow-800/30 rounded-xl p-6 border border-yellow-700/30 transition-all duration-300 ease-out hover:shadow-xl hover:shadow-yellow-900/20 hover:-translate-y-1 hover:from-yellow-900/60 hover:to-yellow-800/40 transform transition-all duration-600 ease-out ${visibleCards.includes(3)
                    ? 'opacity-100 translate-y-0'
                    : 'opacity-0 translate-y-8'
                    }`}>
                    <div className="flex items-center justify-between mb-4">
                        <Target className="h-8 w-8 text-yellow-400" />
                        <span className="text-sm text-gray-400">{t('statistics.winRate')}</span>
                    </div>
                    <div className="text-3xl font-bold text-white mb-1">
                        {safeFormat(globalStats.winRate, 1)}%
                    </div>
                    <div className="text-sm text-gray-400">
                        {t('statistics.successRate')}
                    </div>
                </div>
            </div>


            {/* Gráficas de Análisis */}
            <div className="mb-8">
                {/* Gráfica de Progresión Consolidada */}
                <div className={`bg-gray-800/30 rounded-xl p-6 border border-gray-700/50 transition-all duration-300 ease-out hover:shadow-xl hover:shadow-gray-900/20 hover:-translate-y-1 hover:bg-gray-800/40 transform transition-all duration-600 ease-out ${isVisible
                    ? 'opacity-100 translate-y-0'
                    : 'opacity-0 translate-y-8'
                    }`}>
                    <h3 className="text-xl font-bold text-yellow-400 mb-4 flex items-center gap-2">
                        <BarChart3 className="h-5 w-5" />
                        Progresión Consolidada de Balance
                    </h3>
                    <ConsolidatedBalanceChart
                        journals={journals}
                        initialBalances={initialBalances}
                    />
                </div>

                {/* Análisis Detallado */}
                <div className={`bg-gray-800/30 rounded-xl p-6 border border-gray-700/50 transition-all duration-300 ease-out hover:shadow-xl hover:shadow-gray-900/20 hover:-translate-y-1 hover:bg-gray-800/40 transform transition-all duration-600 ease-out ${isVisible
                    ? 'opacity-100 translate-y-0'
                    : 'opacity-0 translate-y-8'
                    }`}>
                    <h2 className="text-2xl font-bold text-white mb-6 flex items-center gap-3">
                        <PieChart className="h-6 w-6 text-blue-400" />
                        {t('statistics.detailedAnalysis')}
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div className="text-center">
                            <div className="text-3xl font-bold text-green-400 mb-2">
                                +${safeFormatCurrency(globalStats.bestOperation)}
                            </div>
                            <div className="text-gray-400">{t('statistics.bestOperation')}</div>
                        </div>

                        <div className="text-center">
                            <div className="text-3xl font-bold text-red-400 mb-2">
                                ${safeFormatCurrency(globalStats.worstOperation)}
                            </div>
                            <div className="text-gray-400">{t('statistics.worstOperation')}</div>
                        </div>

                        <div className="text-center">
                            <div className="text-3xl font-bold text-yellow-400 mb-2">
                                {safeFormat(globalStats.winRate, 1)}%
                            </div>
                            <div className="text-gray-400">{t('statistics.overallWinRate')}</div>
                        </div>
                    </div>
                </div>
            </div>
            );
}
